// DGrok Delphi parser
// Copyright (C) 2007 Joe White
// http://www.excastle.com/dgrok
//
// Licensed under the Open Software License version 3.0
// http://www.opensource.org/licenses/osl-3.0.php

// Autogenerated file - do not edit

using System;
using System.Collections.Generic;
using System.Text;
using DGrok.Framework;

namespace DGrok.DelphiNodes
{
    public partial class ArrayTypeNode : NonterminalNode
    {
        private Token _array;
        private Token _closeBracket;
        private ListNode<DelimitedItemNode<AstNode>> _indexList;
        private Token _of;
        private Token _openBracket;
        private AstNode _type;

        public ArrayTypeNode(Token array, Token openBracket, ListNode<DelimitedItemNode<AstNode>> indexList, Token closeBracket, Token of, AstNode type)
        {
            _array = array;
            _openBracket = openBracket;
            _indexList = indexList;
            _closeBracket = closeBracket;
            _of = of;
            _type = type;
        }

        public Token Array
        {
            get { return _array; }
        }
        public Token CloseBracket
        {
            get { return _closeBracket; }
        }
        public ListNode<DelimitedItemNode<AstNode>> IndexList
        {
            get { return _indexList; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public Token OpenBracket
        {
            get { return _openBracket; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Array", Array);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("IndexList", IndexList);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitArrayTypeNode(this);
        }
    }
    public partial class AssemblerStatementNode : NonterminalNode
    {
        private Token _asm;
        private Token _end;

        public AssemblerStatementNode(Token asm, Token end)
        {
            _asm = asm;
            _end = end;
        }

        public Token Asm
        {
            get { return _asm; }
        }
        public Token End
        {
            get { return _end; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Asm", Asm);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitAssemblerStatementNode(this);
        }
    }
    public partial class AttributeNode : NonterminalNode
    {
        private Token _closeBracket;
        private Token _colon;
        private Token _openBracket;
        private Token _scope;
        private AstNode _value;

        public AttributeNode(Token openBracket, Token scope, Token colon, AstNode value, Token closeBracket)
        {
            _openBracket = openBracket;
            _scope = scope;
            _colon = colon;
            _value = value;
            _closeBracket = closeBracket;
        }

        public Token CloseBracket
        {
            get { return _closeBracket; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public Token OpenBracket
        {
            get { return _openBracket; }
        }
        public Token Scope
        {
            get { return _scope; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("Scope", Scope);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitAttributeNode(this);
        }
    }
    public partial class BinaryOperationNode : NonterminalNode
    {
        private AstNode _left;
        private Token _operator;
        private AstNode _right;

        public BinaryOperationNode(AstNode left, Token theOperator, AstNode right)
        {
            _left = left;
            _operator = theOperator;
            _right = right;
        }

        public AstNode Left
        {
            get { return _left; }
        }
        public Token Operator
        {
            get { return _operator; }
        }
        public AstNode Right
        {
            get { return _right; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Left", Left);
                yield return new KeyValuePair<string, AstNode>("Operator", Operator);
                yield return new KeyValuePair<string, AstNode>("Right", Right);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitBinaryOperationNode(this);
        }
    }
    public partial class BlockNode : NonterminalNode
    {
        private Token _begin;
        private Token _end;
        private ListNode<DelimitedItemNode<AstNode>> _statementList;

        public BlockNode(Token begin, ListNode<DelimitedItemNode<AstNode>> statementList, Token end)
        {
            _begin = begin;
            _statementList = statementList;
            _end = end;
        }

        public Token Begin
        {
            get { return _begin; }
        }
        public Token End
        {
            get { return _end; }
        }
        public ListNode<DelimitedItemNode<AstNode>> StatementList
        {
            get { return _statementList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Begin", Begin);
                yield return new KeyValuePair<string, AstNode>("StatementList", StatementList);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitBlockNode(this);
        }
    }
    public partial class CaseSelectorNode : NonterminalNode
    {
        private Token _colon;
        private Token _semicolon;
        private AstNode _statement;
        private ListNode<DelimitedItemNode<AstNode>> _values;

        public CaseSelectorNode(ListNode<DelimitedItemNode<AstNode>> values, Token colon, AstNode statement, Token semicolon)
        {
            _values = values;
            _colon = colon;
            _statement = statement;
            _semicolon = semicolon;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }
        public ListNode<DelimitedItemNode<AstNode>> Values
        {
            get { return _values; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Values", Values);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitCaseSelectorNode(this);
        }
    }
    public partial class CaseStatementNode : NonterminalNode
    {
        private Token _case;
        private Token _else;
        private ListNode<DelimitedItemNode<AstNode>> _elseStatements;
        private Token _end;
        private AstNode _expression;
        private Token _of;
        private ListNode<CaseSelectorNode> _selectorList;

        public CaseStatementNode(Token theCase, AstNode expression, Token of, ListNode<CaseSelectorNode> selectorList, Token theElse, ListNode<DelimitedItemNode<AstNode>> elseStatements, Token end)
        {
            _case = theCase;
            _expression = expression;
            _of = of;
            _selectorList = selectorList;
            _else = theElse;
            _elseStatements = elseStatements;
            _end = end;
        }

        public Token Case
        {
            get { return _case; }
        }
        public Token Else
        {
            get { return _else; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ElseStatements
        {
            get { return _elseStatements; }
        }
        public Token End
        {
            get { return _end; }
        }
        public AstNode Expression
        {
            get { return _expression; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public ListNode<CaseSelectorNode> SelectorList
        {
            get { return _selectorList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Case", Case);
                yield return new KeyValuePair<string, AstNode>("Expression", Expression);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("SelectorList", SelectorList);
                yield return new KeyValuePair<string, AstNode>("Else", Else);
                yield return new KeyValuePair<string, AstNode>("ElseStatements", ElseStatements);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitCaseStatementNode(this);
        }
    }
    public partial class ClassOfNode : NonterminalNode
    {
        private Token _class;
        private Token _of;
        private AstNode _type;

        public ClassOfNode(Token theClass, Token of, AstNode type)
        {
            _class = theClass;
            _of = of;
            _type = type;
        }

        public Token Class
        {
            get { return _class; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitClassOfNode(this);
        }
    }
    public partial class ClassTypeNode : NonterminalNode
    {
        private Token _class;
        private Token _closeParenthesis;
        private ListNode<VisibilitySectionNode> _contents;
        private Token _disposition;
        private Token _end;
        private ListNode<DelimitedItemNode<AstNode>> _inheritanceList;
        private Token _openParenthesis;

        public ClassTypeNode(Token theClass, Token disposition, Token openParenthesis, ListNode<DelimitedItemNode<AstNode>> inheritanceList, Token closeParenthesis, ListNode<VisibilitySectionNode> contents, Token end)
        {
            _class = theClass;
            _disposition = disposition;
            _openParenthesis = openParenthesis;
            _inheritanceList = inheritanceList;
            _closeParenthesis = closeParenthesis;
            _contents = contents;
            _end = end;
        }

        public Token Class
        {
            get { return _class; }
        }
        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public ListNode<VisibilitySectionNode> Contents
        {
            get { return _contents; }
        }
        public Token Disposition
        {
            get { return _disposition; }
        }
        public Token End
        {
            get { return _end; }
        }
        public ListNode<DelimitedItemNode<AstNode>> InheritanceList
        {
            get { return _inheritanceList; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("Disposition", Disposition);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("InheritanceList", InheritanceList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Contents", Contents);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitClassTypeNode(this);
        }
    }
    public partial class ConstantDeclNode : NonterminalNode
    {
        private Token _colon;
        private Token _equalSign;
        private Token _name;
        private ListNode<Token> _portabilityDirectiveList;
        private Token _semicolon;
        private AstNode _type;
        private AstNode _value;

        public ConstantDeclNode(Token name, Token colon, AstNode type, Token equalSign, AstNode value, ListNode<Token> portabilityDirectiveList, Token semicolon)
        {
            _name = name;
            _colon = colon;
            _type = type;
            _equalSign = equalSign;
            _value = value;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public ListNode<Token> PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitConstantDeclNode(this);
        }
    }
    public partial class ConstantListNode : NonterminalNode
    {
        private Token _closeParenthesis;
        private ListNode<DelimitedItemNode<AstNode>> _itemList;
        private Token _openParenthesis;

        public ConstantListNode(Token openParenthesis, ListNode<DelimitedItemNode<AstNode>> itemList, Token closeParenthesis)
        {
            _openParenthesis = openParenthesis;
            _itemList = itemList;
            _closeParenthesis = closeParenthesis;
        }

        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ItemList
        {
            get { return _itemList; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitConstantListNode(this);
        }
    }
    public partial class ConstSectionNode : NonterminalNode
    {
        private Token _const;
        private ListNode<ConstantDeclNode> _constList;

        public ConstSectionNode(Token theConst, ListNode<ConstantDeclNode> constList)
        {
            _const = theConst;
            _constList = constList;
        }

        public Token Const
        {
            get { return _const; }
        }
        public ListNode<ConstantDeclNode> ConstList
        {
            get { return _constList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Const", Const);
                yield return new KeyValuePair<string, AstNode>("ConstList", ConstList);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitConstSectionNode(this);
        }
    }
    public partial class DirectiveNode : NonterminalNode
    {
        private AstNode _data;
        private Token _directive;
        private Token _semicolon;
        private AstNode _value;

        public DirectiveNode(Token semicolon, Token directive, AstNode value, AstNode data)
        {
            _semicolon = semicolon;
            _directive = directive;
            _value = value;
            _data = data;
        }

        public AstNode Data
        {
            get { return _data; }
        }
        public Token Directive
        {
            get { return _directive; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("Directive", Directive);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("Data", Data);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitDirectiveNode(this);
        }
    }
    public partial class EnumeratedTypeElementNode : NonterminalNode
    {
        private Token _equalSign;
        private Token _name;
        private AstNode _value;

        public EnumeratedTypeElementNode(Token name, Token equalSign, AstNode value)
        {
            _name = name;
            _equalSign = equalSign;
            _value = value;
        }

        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitEnumeratedTypeElementNode(this);
        }
    }
    public partial class EnumeratedTypeNode : NonterminalNode
    {
        private Token _closeParenthesis;
        private ListNode<DelimitedItemNode<EnumeratedTypeElementNode>> _itemList;
        private Token _openParenthesis;

        public EnumeratedTypeNode(Token openParenthesis, ListNode<DelimitedItemNode<EnumeratedTypeElementNode>> itemList, Token closeParenthesis)
        {
            _openParenthesis = openParenthesis;
            _itemList = itemList;
            _closeParenthesis = closeParenthesis;
        }

        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public ListNode<DelimitedItemNode<EnumeratedTypeElementNode>> ItemList
        {
            get { return _itemList; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitEnumeratedTypeNode(this);
        }
    }
    public partial class ExceptionItemNode : NonterminalNode
    {
        private Token _colon;
        private Token _do;
        private Token _name;
        private Token _on;
        private Token _semicolon;
        private AstNode _statement;
        private AstNode _type;

        public ExceptionItemNode(Token on, Token name, Token colon, AstNode type, Token theDo, AstNode statement, Token semicolon)
        {
            _on = on;
            _name = name;
            _colon = colon;
            _type = type;
            _do = theDo;
            _statement = statement;
            _semicolon = semicolon;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public Token Do
        {
            get { return _do; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public Token On
        {
            get { return _on; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("On", On);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("Do", Do);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExceptionItemNode(this);
        }
    }
    public partial class ExportsItemNode : NonterminalNode
    {
        private AstNode _name;
        private ListNode<ExportsSpecifierNode> _specifierList;

        public ExportsItemNode(AstNode name, ListNode<ExportsSpecifierNode> specifierList)
        {
            _name = name;
            _specifierList = specifierList;
        }

        public AstNode Name
        {
            get { return _name; }
        }
        public ListNode<ExportsSpecifierNode> SpecifierList
        {
            get { return _specifierList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("SpecifierList", SpecifierList);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExportsItemNode(this);
        }
    }
    public partial class ExportsSpecifierNode : NonterminalNode
    {
        private Token _keyword;
        private AstNode _value;

        public ExportsSpecifierNode(Token keyword, AstNode value)
        {
            _keyword = keyword;
            _value = value;
        }

        public Token Keyword
        {
            get { return _keyword; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Keyword", Keyword);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExportsSpecifierNode(this);
        }
    }
    public partial class ExportsStatementNode : NonterminalNode
    {
        private Token _exports;
        private ListNode<DelimitedItemNode<ExportsItemNode>> _itemList;
        private Token _semicolon;

        public ExportsStatementNode(Token exports, ListNode<DelimitedItemNode<ExportsItemNode>> itemList, Token semicolon)
        {
            _exports = exports;
            _itemList = itemList;
            _semicolon = semicolon;
        }

        public Token Exports
        {
            get { return _exports; }
        }
        public ListNode<DelimitedItemNode<ExportsItemNode>> ItemList
        {
            get { return _itemList; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Exports", Exports);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExportsStatementNode(this);
        }
    }
    public partial class FancyBlockNode : NonterminalNode
    {
        private AstNode _block;
        private ListNode<AstNode> _declList;

        public FancyBlockNode(ListNode<AstNode> declList, AstNode block)
        {
            _declList = declList;
            _block = block;
        }

        public AstNode Block
        {
            get { return _block; }
        }
        public ListNode<AstNode> DeclList
        {
            get { return _declList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("DeclList", DeclList);
                yield return new KeyValuePair<string, AstNode>("Block", Block);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFancyBlockNode(this);
        }
    }
    public partial class FieldDeclNode : NonterminalNode
    {
        private Token _colon;
        private ListNode<DelimitedItemNode<Token>> _nameList;
        private ListNode<Token> _portabilityDirectiveList;
        private Token _semicolon;
        private AstNode _type;

        public FieldDeclNode(ListNode<DelimitedItemNode<Token>> nameList, Token colon, AstNode type, ListNode<Token> portabilityDirectiveList, Token semicolon)
        {
            _nameList = nameList;
            _colon = colon;
            _type = type;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public ListNode<DelimitedItemNode<Token>> NameList
        {
            get { return _nameList; }
        }
        public ListNode<Token> PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameList", NameList);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFieldDeclNode(this);
        }
    }
    public partial class FieldSectionNode : NonterminalNode
    {
        private Token _class;
        private ListNode<FieldDeclNode> _fieldList;
        private Token _var;

        public FieldSectionNode(Token theClass, Token var, ListNode<FieldDeclNode> fieldList)
        {
            _class = theClass;
            _var = var;
            _fieldList = fieldList;
        }

        public Token Class
        {
            get { return _class; }
        }
        public ListNode<FieldDeclNode> FieldList
        {
            get { return _fieldList; }
        }
        public Token Var
        {
            get { return _var; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("Var", Var);
                yield return new KeyValuePair<string, AstNode>("FieldList", FieldList);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFieldSectionNode(this);
        }
    }
    public partial class FileTypeNode : NonterminalNode
    {
        private Token _file;
        private Token _of;
        private AstNode _type;

        public FileTypeNode(Token file, Token of, AstNode type)
        {
            _file = file;
            _of = of;
            _type = type;
        }

        public Token File
        {
            get { return _file; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("File", File);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFileTypeNode(this);
        }
    }
    public partial class ForInStatementNode : NonterminalNode
    {
        private Token _do;
        private AstNode _expression;
        private Token _for;
        private Token _in;
        private Token _loopVariable;
        private AstNode _statement;

        public ForInStatementNode(Token theFor, Token loopVariable, Token theIn, AstNode expression, Token theDo, AstNode statement)
        {
            _for = theFor;
            _loopVariable = loopVariable;
            _in = theIn;
            _expression = expression;
            _do = theDo;
            _statement = statement;
        }

        public Token Do
        {
            get { return _do; }
        }
        public AstNode Expression
        {
            get { return _expression; }
        }
        public Token For
        {
            get { return _for; }
        }
        public Token In
        {
            get { return _in; }
        }
        public Token LoopVariable
        {
            get { return _loopVariable; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("For", For);
                yield return new KeyValuePair<string, AstNode>("LoopVariable", LoopVariable);
                yield return new KeyValuePair<string, AstNode>("In", In);
                yield return new KeyValuePair<string, AstNode>("Expression", Expression);
                yield return new KeyValuePair<string, AstNode>("Do", Do);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitForInStatementNode(this);
        }
    }
    public partial class ForStatementNode : NonterminalNode
    {
        private Token _colonEquals;
        private Token _direction;
        private Token _do;
        private AstNode _endingValue;
        private Token _for;
        private Token _loopVariable;
        private AstNode _startingValue;
        private AstNode _statement;

        public ForStatementNode(Token theFor, Token loopVariable, Token colonEquals, AstNode startingValue, Token direction, AstNode endingValue, Token theDo, AstNode statement)
        {
            _for = theFor;
            _loopVariable = loopVariable;
            _colonEquals = colonEquals;
            _startingValue = startingValue;
            _direction = direction;
            _endingValue = endingValue;
            _do = theDo;
            _statement = statement;
        }

        public Token ColonEquals
        {
            get { return _colonEquals; }
        }
        public Token Direction
        {
            get { return _direction; }
        }
        public Token Do
        {
            get { return _do; }
        }
        public AstNode EndingValue
        {
            get { return _endingValue; }
        }
        public Token For
        {
            get { return _for; }
        }
        public Token LoopVariable
        {
            get { return _loopVariable; }
        }
        public AstNode StartingValue
        {
            get { return _startingValue; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("For", For);
                yield return new KeyValuePair<string, AstNode>("LoopVariable", LoopVariable);
                yield return new KeyValuePair<string, AstNode>("ColonEquals", ColonEquals);
                yield return new KeyValuePair<string, AstNode>("StartingValue", StartingValue);
                yield return new KeyValuePair<string, AstNode>("Direction", Direction);
                yield return new KeyValuePair<string, AstNode>("EndingValue", EndingValue);
                yield return new KeyValuePair<string, AstNode>("Do", Do);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitForStatementNode(this);
        }
    }
    public partial class GotoStatementNode : NonterminalNode
    {
        private Token _goto;
        private Token _labelId;

        public GotoStatementNode(Token theGoto, Token labelId)
        {
            _goto = theGoto;
            _labelId = labelId;
        }

        public Token Goto
        {
            get { return _goto; }
        }
        public Token LabelId
        {
            get { return _labelId; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Goto", Goto);
                yield return new KeyValuePair<string, AstNode>("LabelId", LabelId);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitGotoStatementNode(this);
        }
    }
    public partial class IfStatementNode : NonterminalNode
    {
        private AstNode _condition;
        private Token _else;
        private AstNode _elseStatement;
        private Token _if;
        private Token _then;
        private AstNode _thenStatement;

        public IfStatementNode(Token theIf, AstNode condition, Token then, AstNode thenStatement, Token theElse, AstNode elseStatement)
        {
            _if = theIf;
            _condition = condition;
            _then = then;
            _thenStatement = thenStatement;
            _else = theElse;
            _elseStatement = elseStatement;
        }

        public AstNode Condition
        {
            get { return _condition; }
        }
        public Token Else
        {
            get { return _else; }
        }
        public AstNode ElseStatement
        {
            get { return _elseStatement; }
        }
        public Token If
        {
            get { return _if; }
        }
        public Token Then
        {
            get { return _then; }
        }
        public AstNode ThenStatement
        {
            get { return _thenStatement; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("If", If);
                yield return new KeyValuePair<string, AstNode>("Condition", Condition);
                yield return new KeyValuePair<string, AstNode>("Then", Then);
                yield return new KeyValuePair<string, AstNode>("ThenStatement", ThenStatement);
                yield return new KeyValuePair<string, AstNode>("Else", Else);
                yield return new KeyValuePair<string, AstNode>("ElseStatement", ElseStatement);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitIfStatementNode(this);
        }
    }
    public partial class InitSectionNode : NonterminalNode
    {
        private Token _end;
        private Token _finalizationHeader;
        private ListNode<DelimitedItemNode<AstNode>> _finalizationStatements;
        private Token _initializationHeader;
        private ListNode<DelimitedItemNode<AstNode>> _initializationStatements;

        public InitSectionNode(Token initializationHeader, ListNode<DelimitedItemNode<AstNode>> initializationStatements, Token finalizationHeader, ListNode<DelimitedItemNode<AstNode>> finalizationStatements, Token end)
        {
            _initializationHeader = initializationHeader;
            _initializationStatements = initializationStatements;
            _finalizationHeader = finalizationHeader;
            _finalizationStatements = finalizationStatements;
            _end = end;
        }

        public Token End
        {
            get { return _end; }
        }
        public Token FinalizationHeader
        {
            get { return _finalizationHeader; }
        }
        public ListNode<DelimitedItemNode<AstNode>> FinalizationStatements
        {
            get { return _finalizationStatements; }
        }
        public Token InitializationHeader
        {
            get { return _initializationHeader; }
        }
        public ListNode<DelimitedItemNode<AstNode>> InitializationStatements
        {
            get { return _initializationStatements; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("InitializationHeader", InitializationHeader);
                yield return new KeyValuePair<string, AstNode>("InitializationStatements", InitializationStatements);
                yield return new KeyValuePair<string, AstNode>("FinalizationHeader", FinalizationHeader);
                yield return new KeyValuePair<string, AstNode>("FinalizationStatements", FinalizationStatements);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitInitSectionNode(this);
        }
    }
    public partial class InterfaceTypeNode : NonterminalNode
    {
        private AstNode _baseInterface;
        private Token _closeBracket;
        private Token _closeParenthesis;
        private Token _end;
        private AstNode _guid;
        private Token _interface;
        private ListNode<AstNode> _methodAndPropertyList;
        private Token _openBracket;
        private Token _openParenthesis;

        public InterfaceTypeNode(Token theInterface, Token openParenthesis, AstNode baseInterface, Token closeParenthesis, Token openBracket, AstNode guid, Token closeBracket, ListNode<AstNode> methodAndPropertyList, Token end)
        {
            _interface = theInterface;
            _openParenthesis = openParenthesis;
            _baseInterface = baseInterface;
            _closeParenthesis = closeParenthesis;
            _openBracket = openBracket;
            _guid = guid;
            _closeBracket = closeBracket;
            _methodAndPropertyList = methodAndPropertyList;
            _end = end;
        }

        public AstNode BaseInterface
        {
            get { return _baseInterface; }
        }
        public Token CloseBracket
        {
            get { return _closeBracket; }
        }
        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public Token End
        {
            get { return _end; }
        }
        public AstNode Guid
        {
            get { return _guid; }
        }
        public Token Interface
        {
            get { return _interface; }
        }
        public ListNode<AstNode> MethodAndPropertyList
        {
            get { return _methodAndPropertyList; }
        }
        public Token OpenBracket
        {
            get { return _openBracket; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Interface", Interface);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("BaseInterface", BaseInterface);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("Guid", Guid);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
                yield return new KeyValuePair<string, AstNode>("MethodAndPropertyList", MethodAndPropertyList);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitInterfaceTypeNode(this);
        }
    }
    public partial class LabelDeclSectionNode : NonterminalNode
    {
        private Token _label;
        private ListNode<DelimitedItemNode<Token>> _labelList;
        private Token _semicolon;

        public LabelDeclSectionNode(Token label, ListNode<DelimitedItemNode<Token>> labelList, Token semicolon)
        {
            _label = label;
            _labelList = labelList;
            _semicolon = semicolon;
        }

        public Token Label
        {
            get { return _label; }
        }
        public ListNode<DelimitedItemNode<Token>> LabelList
        {
            get { return _labelList; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Label", Label);
                yield return new KeyValuePair<string, AstNode>("LabelList", LabelList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitLabelDeclSectionNode(this);
        }
    }
    public partial class LabeledStatementNode : NonterminalNode
    {
        private Token _colon;
        private Token _label;
        private AstNode _statement;

        public LabeledStatementNode(Token label, Token colon, AstNode statement)
        {
            _label = label;
            _colon = colon;
            _statement = statement;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public Token Label
        {
            get { return _label; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Label", Label);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitLabeledStatementNode(this);
        }
    }
    public partial class MethodHeadingNode : NonterminalNode
    {
        private Token _class;
        private Token _closeParenthesis;
        private Token _colon;
        private ListNode<DirectiveNode> _directiveList;
        private Token _methodType;
        private AstNode _name;
        private Token _openParenthesis;
        private ListNode<DelimitedItemNode<ParameterNode>> _parameterList;
        private AstNode _returnType;
        private Token _semicolon;

        public MethodHeadingNode(Token theClass, Token methodType, AstNode name, Token openParenthesis, ListNode<DelimitedItemNode<ParameterNode>> parameterList, Token closeParenthesis, Token colon, AstNode returnType, ListNode<DirectiveNode> directiveList, Token semicolon)
        {
            _class = theClass;
            _methodType = methodType;
            _name = name;
            _openParenthesis = openParenthesis;
            _parameterList = parameterList;
            _closeParenthesis = closeParenthesis;
            _colon = colon;
            _returnType = returnType;
            _directiveList = directiveList;
            _semicolon = semicolon;
        }

        public Token Class
        {
            get { return _class; }
        }
        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public ListNode<DirectiveNode> DirectiveList
        {
            get { return _directiveList; }
        }
        public Token MethodType
        {
            get { return _methodType; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }
        public ListNode<DelimitedItemNode<ParameterNode>> ParameterList
        {
            get { return _parameterList; }
        }
        public AstNode ReturnType
        {
            get { return _returnType; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("MethodType", MethodType);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("ReturnType", ReturnType);
                yield return new KeyValuePair<string, AstNode>("DirectiveList", DirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitMethodHeadingNode(this);
        }
    }
    public partial class MethodImplementationNode : NonterminalNode
    {
        private FancyBlockNode _fancyBlock;
        private MethodHeadingNode _methodHeading;
        private Token _semicolon;

        public MethodImplementationNode(MethodHeadingNode methodHeading, FancyBlockNode fancyBlock, Token semicolon)
        {
            _methodHeading = methodHeading;
            _fancyBlock = fancyBlock;
            _semicolon = semicolon;
        }

        public FancyBlockNode FancyBlock
        {
            get { return _fancyBlock; }
        }
        public MethodHeadingNode MethodHeading
        {
            get { return _methodHeading; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodHeading", MethodHeading);
                yield return new KeyValuePair<string, AstNode>("FancyBlock", FancyBlock);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitMethodImplementationNode(this);
        }
    }
    public partial class MethodResolutionNode : NonterminalNode
    {
        private Token _equalSign;
        private Token _implementationMethod;
        private AstNode _interfaceMethod;
        private Token _methodType;
        private Token _semicolon;

        public MethodResolutionNode(Token methodType, AstNode interfaceMethod, Token equalSign, Token implementationMethod, Token semicolon)
        {
            _methodType = methodType;
            _interfaceMethod = interfaceMethod;
            _equalSign = equalSign;
            _implementationMethod = implementationMethod;
            _semicolon = semicolon;
        }

        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public Token ImplementationMethod
        {
            get { return _implementationMethod; }
        }
        public AstNode InterfaceMethod
        {
            get { return _interfaceMethod; }
        }
        public Token MethodType
        {
            get { return _methodType; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodType", MethodType);
                yield return new KeyValuePair<string, AstNode>("InterfaceMethod", InterfaceMethod);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("ImplementationMethod", ImplementationMethod);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitMethodResolutionNode(this);
        }
    }
    public partial class NumberFormatNode : NonterminalNode
    {
        private AstNode _precision;
        private Token _precisionColon;
        private AstNode _size;
        private Token _sizeColon;
        private AstNode _value;

        public NumberFormatNode(AstNode value, Token sizeColon, AstNode size, Token precisionColon, AstNode precision)
        {
            _value = value;
            _sizeColon = sizeColon;
            _size = size;
            _precisionColon = precisionColon;
            _precision = precision;
        }

        public AstNode Precision
        {
            get { return _precision; }
        }
        public Token PrecisionColon
        {
            get { return _precisionColon; }
        }
        public AstNode Size
        {
            get { return _size; }
        }
        public Token SizeColon
        {
            get { return _sizeColon; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("SizeColon", SizeColon);
                yield return new KeyValuePair<string, AstNode>("Size", Size);
                yield return new KeyValuePair<string, AstNode>("PrecisionColon", PrecisionColon);
                yield return new KeyValuePair<string, AstNode>("Precision", Precision);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitNumberFormatNode(this);
        }
    }
    public partial class OpenArrayNode : NonterminalNode
    {
        private Token _array;
        private Token _of;
        private AstNode _type;

        public OpenArrayNode(Token array, Token of, AstNode type)
        {
            _array = array;
            _of = of;
            _type = type;
        }

        public Token Array
        {
            get { return _array; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Array", Array);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitOpenArrayNode(this);
        }
    }
    public partial class PackageNode : NonterminalNode
    {
        private ListNode<AttributeNode> _attributeList;
        private UsesClauseNode _containsClause;
        private Token _dot;
        private Token _end;
        private AstNode _name;
        private Token _package;
        private RequiresClauseNode _requiresClause;
        private Token _semicolon;

        public PackageNode(Token package, AstNode name, Token semicolon, ListNode<AttributeNode> attributeList, RequiresClauseNode requiresClause, UsesClauseNode containsClause, Token end, Token dot)
        {
            _package = package;
            _name = name;
            _semicolon = semicolon;
            _attributeList = attributeList;
            _requiresClause = requiresClause;
            _containsClause = containsClause;
            _end = end;
            _dot = dot;
        }

        public ListNode<AttributeNode> AttributeList
        {
            get { return _attributeList; }
        }
        public UsesClauseNode ContainsClause
        {
            get { return _containsClause; }
        }
        public Token Dot
        {
            get { return _dot; }
        }
        public Token End
        {
            get { return _end; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public Token Package
        {
            get { return _package; }
        }
        public RequiresClauseNode RequiresClause
        {
            get { return _requiresClause; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Package", Package);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("AttributeList", AttributeList);
                yield return new KeyValuePair<string, AstNode>("RequiresClause", RequiresClause);
                yield return new KeyValuePair<string, AstNode>("ContainsClause", ContainsClause);
                yield return new KeyValuePair<string, AstNode>("End", End);
                yield return new KeyValuePair<string, AstNode>("Dot", Dot);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPackageNode(this);
        }
    }
    public partial class PackedTypeNode : NonterminalNode
    {
        private Token _packed;
        private AstNode _type;

        public PackedTypeNode(Token packed, AstNode type)
        {
            _packed = packed;
            _type = type;
        }

        public Token Packed
        {
            get { return _packed; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Packed", Packed);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPackedTypeNode(this);
        }
    }
    public partial class ParameterizedNode : NonterminalNode
    {
        private Token _closeDelimiter;
        private AstNode _left;
        private Token _openDelimiter;
        private ListNode<DelimitedItemNode<AstNode>> _parameterList;

        public ParameterizedNode(AstNode left, Token openDelimiter, ListNode<DelimitedItemNode<AstNode>> parameterList, Token closeDelimiter)
        {
            _left = left;
            _openDelimiter = openDelimiter;
            _parameterList = parameterList;
            _closeDelimiter = closeDelimiter;
        }

        public Token CloseDelimiter
        {
            get { return _closeDelimiter; }
        }
        public AstNode Left
        {
            get { return _left; }
        }
        public Token OpenDelimiter
        {
            get { return _openDelimiter; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ParameterList
        {
            get { return _parameterList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Left", Left);
                yield return new KeyValuePair<string, AstNode>("OpenDelimiter", OpenDelimiter);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseDelimiter", CloseDelimiter);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitParameterizedNode(this);
        }
    }
    public partial class ParameterNode : NonterminalNode
    {
        private Token _colon;
        private AstNode _defaultValue;
        private Token _equalSign;
        private Token _modifier;
        private ListNode<DelimitedItemNode<Token>> _names;
        private AstNode _type;

        public ParameterNode(Token modifier, ListNode<DelimitedItemNode<Token>> names, Token colon, AstNode type, Token equalSign, AstNode defaultValue)
        {
            _modifier = modifier;
            _names = names;
            _colon = colon;
            _type = type;
            _equalSign = equalSign;
            _defaultValue = defaultValue;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public AstNode DefaultValue
        {
            get { return _defaultValue; }
        }
        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public Token Modifier
        {
            get { return _modifier; }
        }
        public ListNode<DelimitedItemNode<Token>> Names
        {
            get { return _names; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Modifier", Modifier);
                yield return new KeyValuePair<string, AstNode>("Names", Names);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("DefaultValue", DefaultValue);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitParameterNode(this);
        }
    }
    public partial class ParenthesizedExpressionNode : NonterminalNode
    {
        private Token _closeParenthesis;
        private AstNode _expression;
        private Token _openParenthesis;

        public ParenthesizedExpressionNode(Token openParenthesis, AstNode expression, Token closeParenthesis)
        {
            _openParenthesis = openParenthesis;
            _expression = expression;
            _closeParenthesis = closeParenthesis;
        }

        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode Expression
        {
            get { return _expression; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("Expression", Expression);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitParenthesizedExpressionNode(this);
        }
    }
    public partial class PointerDereferenceNode : NonterminalNode
    {
        private Token _caret;
        private AstNode _operand;

        public PointerDereferenceNode(AstNode operand, Token caret)
        {
            _operand = operand;
            _caret = caret;
        }

        public Token Caret
        {
            get { return _caret; }
        }
        public AstNode Operand
        {
            get { return _operand; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Operand", Operand);
                yield return new KeyValuePair<string, AstNode>("Caret", Caret);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPointerDereferenceNode(this);
        }
    }
    public partial class PointerTypeNode : NonterminalNode
    {
        private Token _caret;
        private AstNode _type;

        public PointerTypeNode(Token caret, AstNode type)
        {
            _caret = caret;
            _type = type;
        }

        public Token Caret
        {
            get { return _caret; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Caret", Caret);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPointerTypeNode(this);
        }
    }
    public partial class ProcedureTypeNode : NonterminalNode
    {
        private Token _closeParenthesis;
        private Token _colon;
        private ListNode<DirectiveNode> _firstDirectives;
        private Token _methodType;
        private Token _object;
        private Token _of;
        private Token _openParenthesis;
        private ListNode<DelimitedItemNode<ParameterNode>> _parameterList;
        private AstNode _returnType;
        private ListNode<DirectiveNode> _secondDirectives;

        public ProcedureTypeNode(Token methodType, Token openParenthesis, ListNode<DelimitedItemNode<ParameterNode>> parameterList, Token closeParenthesis, Token colon, AstNode returnType, ListNode<DirectiveNode> firstDirectives, Token of, Token theObject, ListNode<DirectiveNode> secondDirectives)
        {
            _methodType = methodType;
            _openParenthesis = openParenthesis;
            _parameterList = parameterList;
            _closeParenthesis = closeParenthesis;
            _colon = colon;
            _returnType = returnType;
            _firstDirectives = firstDirectives;
            _of = of;
            _object = theObject;
            _secondDirectives = secondDirectives;
        }

        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public ListNode<DirectiveNode> FirstDirectives
        {
            get { return _firstDirectives; }
        }
        public Token MethodType
        {
            get { return _methodType; }
        }
        public Token Object
        {
            get { return _object; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }
        public ListNode<DelimitedItemNode<ParameterNode>> ParameterList
        {
            get { return _parameterList; }
        }
        public AstNode ReturnType
        {
            get { return _returnType; }
        }
        public ListNode<DirectiveNode> SecondDirectives
        {
            get { return _secondDirectives; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodType", MethodType);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("ReturnType", ReturnType);
                yield return new KeyValuePair<string, AstNode>("FirstDirectives", FirstDirectives);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Object", Object);
                yield return new KeyValuePair<string, AstNode>("SecondDirectives", SecondDirectives);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitProcedureTypeNode(this);
        }
    }
    public partial class ProgramNode : NonterminalNode
    {
        private ListNode<AstNode> _declarationList;
        private Token _dot;
        private InitSectionNode _initSection;
        private Token _name;
        private Token _noiseCloseParenthesis;
        private ListNode<DelimitedItemNode<Token>> _noiseContents;
        private Token _noiseOpenParenthesis;
        private Token _program;
        private Token _semicolon;
        private UsesClauseNode _usesClause;

        public ProgramNode(Token program, Token name, Token noiseOpenParenthesis, ListNode<DelimitedItemNode<Token>> noiseContents, Token noiseCloseParenthesis, Token semicolon, UsesClauseNode usesClause, ListNode<AstNode> declarationList, InitSectionNode initSection, Token dot)
        {
            _program = program;
            _name = name;
            _noiseOpenParenthesis = noiseOpenParenthesis;
            _noiseContents = noiseContents;
            _noiseCloseParenthesis = noiseCloseParenthesis;
            _semicolon = semicolon;
            _usesClause = usesClause;
            _declarationList = declarationList;
            _initSection = initSection;
            _dot = dot;
        }

        public ListNode<AstNode> DeclarationList
        {
            get { return _declarationList; }
        }
        public Token Dot
        {
            get { return _dot; }
        }
        public InitSectionNode InitSection
        {
            get { return _initSection; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public Token NoiseCloseParenthesis
        {
            get { return _noiseCloseParenthesis; }
        }
        public ListNode<DelimitedItemNode<Token>> NoiseContents
        {
            get { return _noiseContents; }
        }
        public Token NoiseOpenParenthesis
        {
            get { return _noiseOpenParenthesis; }
        }
        public Token Program
        {
            get { return _program; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public UsesClauseNode UsesClause
        {
            get { return _usesClause; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Program", Program);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("NoiseOpenParenthesis", NoiseOpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("NoiseContents", NoiseContents);
                yield return new KeyValuePair<string, AstNode>("NoiseCloseParenthesis", NoiseCloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("UsesClause", UsesClause);
                yield return new KeyValuePair<string, AstNode>("DeclarationList", DeclarationList);
                yield return new KeyValuePair<string, AstNode>("InitSection", InitSection);
                yield return new KeyValuePair<string, AstNode>("Dot", Dot);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitProgramNode(this);
        }
    }
    public partial class PropertyNode : NonterminalNode
    {
        private Token _class;
        private Token _closeBracket;
        private Token _colon;
        private ListNode<DirectiveNode> _directiveList;
        private Token _name;
        private Token _openBracket;
        private ListNode<DelimitedItemNode<ParameterNode>> _parameterList;
        private Token _property;
        private Token _semicolon;
        private AstNode _type;

        public PropertyNode(Token theClass, Token property, Token name, Token openBracket, ListNode<DelimitedItemNode<ParameterNode>> parameterList, Token closeBracket, Token colon, AstNode type, ListNode<DirectiveNode> directiveList, Token semicolon)
        {
            _class = theClass;
            _property = property;
            _name = name;
            _openBracket = openBracket;
            _parameterList = parameterList;
            _closeBracket = closeBracket;
            _colon = colon;
            _type = type;
            _directiveList = directiveList;
            _semicolon = semicolon;
        }

        public Token Class
        {
            get { return _class; }
        }
        public Token CloseBracket
        {
            get { return _closeBracket; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public ListNode<DirectiveNode> DirectiveList
        {
            get { return _directiveList; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public Token OpenBracket
        {
            get { return _openBracket; }
        }
        public ListNode<DelimitedItemNode<ParameterNode>> ParameterList
        {
            get { return _parameterList; }
        }
        public Token Property
        {
            get { return _property; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("Property", Property);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("DirectiveList", DirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPropertyNode(this);
        }
    }
    public partial class RaiseStatementNode : NonterminalNode
    {
        private AstNode _address;
        private Token _at;
        private AstNode _exception;
        private Token _raise;

        public RaiseStatementNode(Token raise, AstNode exception, Token at, AstNode address)
        {
            _raise = raise;
            _exception = exception;
            _at = at;
            _address = address;
        }

        public AstNode Address
        {
            get { return _address; }
        }
        public Token At
        {
            get { return _at; }
        }
        public AstNode Exception
        {
            get { return _exception; }
        }
        public Token Raise
        {
            get { return _raise; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Raise", Raise);
                yield return new KeyValuePair<string, AstNode>("Exception", Exception);
                yield return new KeyValuePair<string, AstNode>("At", At);
                yield return new KeyValuePair<string, AstNode>("Address", Address);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRaiseStatementNode(this);
        }
    }
    public partial class RecordFieldConstantNode : NonterminalNode
    {
        private Token _colon;
        private AstNode _name;
        private AstNode _value;

        public RecordFieldConstantNode(AstNode name, Token colon, AstNode value)
        {
            _name = name;
            _colon = colon;
            _value = value;
        }

        public Token Colon
        {
            get { return _colon; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRecordFieldConstantNode(this);
        }
    }
    public partial class RecordTypeNode : NonterminalNode
    {
        private ListNode<VisibilitySectionNode> _contents;
        private Token _end;
        private Token _record;
        private VariantSectionNode _variantSection;

        public RecordTypeNode(Token record, ListNode<VisibilitySectionNode> contents, VariantSectionNode variantSection, Token end)
        {
            _record = record;
            _contents = contents;
            _variantSection = variantSection;
            _end = end;
        }

        public ListNode<VisibilitySectionNode> Contents
        {
            get { return _contents; }
        }
        public Token End
        {
            get { return _end; }
        }
        public Token Record
        {
            get { return _record; }
        }
        public VariantSectionNode VariantSection
        {
            get { return _variantSection; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Record", Record);
                yield return new KeyValuePair<string, AstNode>("Contents", Contents);
                yield return new KeyValuePair<string, AstNode>("VariantSection", VariantSection);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRecordTypeNode(this);
        }
    }
    public partial class RepeatStatementNode : NonterminalNode
    {
        private AstNode _condition;
        private Token _repeat;
        private ListNode<DelimitedItemNode<AstNode>> _statementList;
        private Token _until;

        public RepeatStatementNode(Token repeat, ListNode<DelimitedItemNode<AstNode>> statementList, Token until, AstNode condition)
        {
            _repeat = repeat;
            _statementList = statementList;
            _until = until;
            _condition = condition;
        }

        public AstNode Condition
        {
            get { return _condition; }
        }
        public Token Repeat
        {
            get { return _repeat; }
        }
        public ListNode<DelimitedItemNode<AstNode>> StatementList
        {
            get { return _statementList; }
        }
        public Token Until
        {
            get { return _until; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Repeat", Repeat);
                yield return new KeyValuePair<string, AstNode>("StatementList", StatementList);
                yield return new KeyValuePair<string, AstNode>("Until", Until);
                yield return new KeyValuePair<string, AstNode>("Condition", Condition);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRepeatStatementNode(this);
        }
    }
    public partial class RequiresClauseNode : NonterminalNode
    {
        private ListNode<DelimitedItemNode<AstNode>> _packageList;
        private Token _requires;
        private Token _semicolon;

        public RequiresClauseNode(Token requires, ListNode<DelimitedItemNode<AstNode>> packageList, Token semicolon)
        {
            _requires = requires;
            _packageList = packageList;
            _semicolon = semicolon;
        }

        public ListNode<DelimitedItemNode<AstNode>> PackageList
        {
            get { return _packageList; }
        }
        public Token Requires
        {
            get { return _requires; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Requires", Requires);
                yield return new KeyValuePair<string, AstNode>("PackageList", PackageList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRequiresClauseNode(this);
        }
    }
    public partial class SetLiteralNode : NonterminalNode
    {
        private Token _closeBracket;
        private ListNode<DelimitedItemNode<AstNode>> _itemList;
        private Token _openBracket;

        public SetLiteralNode(Token openBracket, ListNode<DelimitedItemNode<AstNode>> itemList, Token closeBracket)
        {
            _openBracket = openBracket;
            _itemList = itemList;
            _closeBracket = closeBracket;
        }

        public Token CloseBracket
        {
            get { return _closeBracket; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ItemList
        {
            get { return _itemList; }
        }
        public Token OpenBracket
        {
            get { return _openBracket; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitSetLiteralNode(this);
        }
    }
    public partial class SetOfNode : NonterminalNode
    {
        private Token _of;
        private Token _set;
        private AstNode _type;

        public SetOfNode(Token set, Token of, AstNode type)
        {
            _set = set;
            _of = of;
            _type = type;
        }

        public Token Of
        {
            get { return _of; }
        }
        public Token Set
        {
            get { return _set; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Set", Set);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitSetOfNode(this);
        }
    }
    public partial class StringOfLengthNode : NonterminalNode
    {
        private Token _closeBracket;
        private AstNode _length;
        private Token _openBracket;
        private Token _string;

        public StringOfLengthNode(Token theString, Token openBracket, AstNode length, Token closeBracket)
        {
            _string = theString;
            _openBracket = openBracket;
            _length = length;
            _closeBracket = closeBracket;
        }

        public Token CloseBracket
        {
            get { return _closeBracket; }
        }
        public AstNode Length
        {
            get { return _length; }
        }
        public Token OpenBracket
        {
            get { return _openBracket; }
        }
        public Token String
        {
            get { return _string; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("String", String);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("Length", Length);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitStringOfLengthNode(this);
        }
    }
    public partial class TryExceptNode : NonterminalNode
    {
        private Token _else;
        private ListNode<DelimitedItemNode<AstNode>> _elseStatements;
        private Token _end;
        private Token _except;
        private ListNode<ExceptionItemNode> _exceptionItemList;
        private Token _try;
        private ListNode<DelimitedItemNode<AstNode>> _tryStatements;

        public TryExceptNode(Token theTry, ListNode<DelimitedItemNode<AstNode>> tryStatements, Token except, ListNode<ExceptionItemNode> exceptionItemList, Token theElse, ListNode<DelimitedItemNode<AstNode>> elseStatements, Token end)
        {
            _try = theTry;
            _tryStatements = tryStatements;
            _except = except;
            _exceptionItemList = exceptionItemList;
            _else = theElse;
            _elseStatements = elseStatements;
            _end = end;
        }

        public Token Else
        {
            get { return _else; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ElseStatements
        {
            get { return _elseStatements; }
        }
        public Token End
        {
            get { return _end; }
        }
        public Token Except
        {
            get { return _except; }
        }
        public ListNode<ExceptionItemNode> ExceptionItemList
        {
            get { return _exceptionItemList; }
        }
        public Token Try
        {
            get { return _try; }
        }
        public ListNode<DelimitedItemNode<AstNode>> TryStatements
        {
            get { return _tryStatements; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Try", Try);
                yield return new KeyValuePair<string, AstNode>("TryStatements", TryStatements);
                yield return new KeyValuePair<string, AstNode>("Except", Except);
                yield return new KeyValuePair<string, AstNode>("ExceptionItemList", ExceptionItemList);
                yield return new KeyValuePair<string, AstNode>("Else", Else);
                yield return new KeyValuePair<string, AstNode>("ElseStatements", ElseStatements);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTryExceptNode(this);
        }
    }
    public partial class TryFinallyNode : NonterminalNode
    {
        private Token _end;
        private Token _finally;
        private ListNode<DelimitedItemNode<AstNode>> _finallyStatements;
        private Token _try;
        private ListNode<DelimitedItemNode<AstNode>> _tryStatements;

        public TryFinallyNode(Token theTry, ListNode<DelimitedItemNode<AstNode>> tryStatements, Token theFinally, ListNode<DelimitedItemNode<AstNode>> finallyStatements, Token end)
        {
            _try = theTry;
            _tryStatements = tryStatements;
            _finally = theFinally;
            _finallyStatements = finallyStatements;
            _end = end;
        }

        public Token End
        {
            get { return _end; }
        }
        public Token Finally
        {
            get { return _finally; }
        }
        public ListNode<DelimitedItemNode<AstNode>> FinallyStatements
        {
            get { return _finallyStatements; }
        }
        public Token Try
        {
            get { return _try; }
        }
        public ListNode<DelimitedItemNode<AstNode>> TryStatements
        {
            get { return _tryStatements; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Try", Try);
                yield return new KeyValuePair<string, AstNode>("TryStatements", TryStatements);
                yield return new KeyValuePair<string, AstNode>("Finally", Finally);
                yield return new KeyValuePair<string, AstNode>("FinallyStatements", FinallyStatements);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTryFinallyNode(this);
        }
    }
    public partial class TypeDeclNode : NonterminalNode
    {
        private Token _equalSign;
        private Token _name;
        private ListNode<Token> _portabilityDirectiveList;
        private Token _semicolon;
        private AstNode _type;
        private Token _typeKeyword;

        public TypeDeclNode(Token name, Token equalSign, Token typeKeyword, AstNode type, ListNode<Token> portabilityDirectiveList, Token semicolon)
        {
            _name = name;
            _equalSign = equalSign;
            _typeKeyword = typeKeyword;
            _type = type;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public ListNode<Token> PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public Token TypeKeyword
        {
            get { return _typeKeyword; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("TypeKeyword", TypeKeyword);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeDeclNode(this);
        }
    }
    public partial class TypeForwardDeclarationNode : NonterminalNode
    {
        private Token _equalSign;
        private Token _name;
        private Token _semicolon;
        private Token _type;

        public TypeForwardDeclarationNode(Token name, Token equalSign, Token type, Token semicolon)
        {
            _name = name;
            _equalSign = equalSign;
            _type = type;
            _semicolon = semicolon;
        }

        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public Token Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeForwardDeclarationNode(this);
        }
    }
    public partial class TypeHelperNode : NonterminalNode
    {
        private AstNode _baseHelperType;
        private Token _closeParenthesis;
        private ListNode<VisibilitySectionNode> _contents;
        private Token _end;
        private Token _for;
        private Token _helper;
        private Token _openParenthesis;
        private AstNode _type;
        private Token _typeKeyword;

        public TypeHelperNode(Token typeKeyword, Token helper, Token openParenthesis, AstNode baseHelperType, Token closeParenthesis, Token theFor, AstNode type, ListNode<VisibilitySectionNode> contents, Token end)
        {
            _typeKeyword = typeKeyword;
            _helper = helper;
            _openParenthesis = openParenthesis;
            _baseHelperType = baseHelperType;
            _closeParenthesis = closeParenthesis;
            _for = theFor;
            _type = type;
            _contents = contents;
            _end = end;
        }

        public AstNode BaseHelperType
        {
            get { return _baseHelperType; }
        }
        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public ListNode<VisibilitySectionNode> Contents
        {
            get { return _contents; }
        }
        public Token End
        {
            get { return _end; }
        }
        public Token For
        {
            get { return _for; }
        }
        public Token Helper
        {
            get { return _helper; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public Token TypeKeyword
        {
            get { return _typeKeyword; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("TypeKeyword", TypeKeyword);
                yield return new KeyValuePair<string, AstNode>("Helper", Helper);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("BaseHelperType", BaseHelperType);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("For", For);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("Contents", Contents);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeHelperNode(this);
        }
    }
    public partial class TypeSectionNode : NonterminalNode
    {
        private Token _type;
        private ListNode<AstNode> _typeList;

        public TypeSectionNode(Token type, ListNode<AstNode> typeList)
        {
            _type = type;
            _typeList = typeList;
        }

        public Token Type
        {
            get { return _type; }
        }
        public ListNode<AstNode> TypeList
        {
            get { return _typeList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("TypeList", TypeList);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeSectionNode(this);
        }
    }
    public partial class UnaryOperationNode : NonterminalNode
    {
        private AstNode _operand;
        private Token _operator;

        public UnaryOperationNode(Token theOperator, AstNode operand)
        {
            _operator = theOperator;
            _operand = operand;
        }

        public AstNode Operand
        {
            get { return _operand; }
        }
        public Token Operator
        {
            get { return _operator; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Operator", Operator);
                yield return new KeyValuePair<string, AstNode>("Operand", Operand);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUnaryOperationNode(this);
        }
    }
    public partial class UnitNode : NonterminalNode
    {
        private Token _dot;
        private UnitSectionNode _implementationSection;
        private InitSectionNode _initSection;
        private UnitSectionNode _interfaceSection;
        private ListNode<Token> _portabilityDirectives;
        private Token _semicolon;
        private Token _unit;
        private Token _unitName;

        public UnitNode(Token unit, Token unitName, ListNode<Token> portabilityDirectives, Token semicolon, UnitSectionNode interfaceSection, UnitSectionNode implementationSection, InitSectionNode initSection, Token dot)
        {
            _unit = unit;
            _unitName = unitName;
            _portabilityDirectives = portabilityDirectives;
            _semicolon = semicolon;
            _interfaceSection = interfaceSection;
            _implementationSection = implementationSection;
            _initSection = initSection;
            _dot = dot;
        }

        public Token Dot
        {
            get { return _dot; }
        }
        public UnitSectionNode ImplementationSection
        {
            get { return _implementationSection; }
        }
        public InitSectionNode InitSection
        {
            get { return _initSection; }
        }
        public UnitSectionNode InterfaceSection
        {
            get { return _interfaceSection; }
        }
        public ListNode<Token> PortabilityDirectives
        {
            get { return _portabilityDirectives; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public Token Unit
        {
            get { return _unit; }
        }
        public Token UnitName
        {
            get { return _unitName; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Unit", Unit);
                yield return new KeyValuePair<string, AstNode>("UnitName", UnitName);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectives", PortabilityDirectives);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("InterfaceSection", InterfaceSection);
                yield return new KeyValuePair<string, AstNode>("ImplementationSection", ImplementationSection);
                yield return new KeyValuePair<string, AstNode>("InitSection", InitSection);
                yield return new KeyValuePair<string, AstNode>("Dot", Dot);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUnitNode(this);
        }
    }
    public partial class UnitSectionNode : NonterminalNode
    {
        private ListNode<AstNode> _contents;
        private Token _headerKeyword;
        private UsesClauseNode _usesClause;

        public UnitSectionNode(Token headerKeyword, UsesClauseNode usesClause, ListNode<AstNode> contents)
        {
            _headerKeyword = headerKeyword;
            _usesClause = usesClause;
            _contents = contents;
        }

        public ListNode<AstNode> Contents
        {
            get { return _contents; }
        }
        public Token HeaderKeyword
        {
            get { return _headerKeyword; }
        }
        public UsesClauseNode UsesClause
        {
            get { return _usesClause; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("HeaderKeyword", HeaderKeyword);
                yield return new KeyValuePair<string, AstNode>("UsesClause", UsesClause);
                yield return new KeyValuePair<string, AstNode>("Contents", Contents);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUnitSectionNode(this);
        }
    }
    public partial class UsedUnitNode : NonterminalNode
    {
        private Token _fileName;
        private Token _in;
        private AstNode _name;

        public UsedUnitNode(AstNode name, Token theIn, Token fileName)
        {
            _name = name;
            _in = theIn;
            _fileName = fileName;
        }

        public Token FileName
        {
            get { return _fileName; }
        }
        public Token In
        {
            get { return _in; }
        }
        public AstNode Name
        {
            get { return _name; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("In", In);
                yield return new KeyValuePair<string, AstNode>("FileName", FileName);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUsedUnitNode(this);
        }
    }
    public partial class UsesClauseNode : NonterminalNode
    {
        private Token _semicolon;
        private ListNode<DelimitedItemNode<UsedUnitNode>> _unitList;
        private Token _uses;

        public UsesClauseNode(Token uses, ListNode<DelimitedItemNode<UsedUnitNode>> unitList, Token semicolon)
        {
            _uses = uses;
            _unitList = unitList;
            _semicolon = semicolon;
        }

        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public ListNode<DelimitedItemNode<UsedUnitNode>> UnitList
        {
            get { return _unitList; }
        }
        public Token Uses
        {
            get { return _uses; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Uses", Uses);
                yield return new KeyValuePair<string, AstNode>("UnitList", UnitList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUsesClauseNode(this);
        }
    }
    public partial class VarDeclNode : NonterminalNode
    {
        private Token _absolute;
        private AstNode _absoluteAddress;
        private Token _colon;
        private Token _equalSign;
        private ListNode<Token> _firstPortabilityDirectives;
        private ListNode<DelimitedItemNode<Token>> _names;
        private ListNode<Token> _secondPortabilityDirectives;
        private Token _semicolon;
        private AstNode _type;
        private AstNode _value;

        public VarDeclNode(ListNode<DelimitedItemNode<Token>> names, Token colon, AstNode type, ListNode<Token> firstPortabilityDirectives, Token absolute, AstNode absoluteAddress, Token equalSign, AstNode value, ListNode<Token> secondPortabilityDirectives, Token semicolon)
        {
            _names = names;
            _colon = colon;
            _type = type;
            _firstPortabilityDirectives = firstPortabilityDirectives;
            _absolute = absolute;
            _absoluteAddress = absoluteAddress;
            _equalSign = equalSign;
            _value = value;
            _secondPortabilityDirectives = secondPortabilityDirectives;
            _semicolon = semicolon;
        }

        public Token Absolute
        {
            get { return _absolute; }
        }
        public AstNode AbsoluteAddress
        {
            get { return _absoluteAddress; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public Token EqualSign
        {
            get { return _equalSign; }
        }
        public ListNode<Token> FirstPortabilityDirectives
        {
            get { return _firstPortabilityDirectives; }
        }
        public ListNode<DelimitedItemNode<Token>> Names
        {
            get { return _names; }
        }
        public ListNode<Token> SecondPortabilityDirectives
        {
            get { return _secondPortabilityDirectives; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Names", Names);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("FirstPortabilityDirectives", FirstPortabilityDirectives);
                yield return new KeyValuePair<string, AstNode>("Absolute", Absolute);
                yield return new KeyValuePair<string, AstNode>("AbsoluteAddress", AbsoluteAddress);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("SecondPortabilityDirectives", SecondPortabilityDirectives);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVarDeclNode(this);
        }
    }
    public partial class VariantGroupNode : NonterminalNode
    {
        private Token _closeParenthesis;
        private Token _colon;
        private ListNode<FieldDeclNode> _fieldDeclList;
        private Token _openParenthesis;
        private Token _semicolon;
        private ListNode<DelimitedItemNode<AstNode>> _valueList;
        private VariantSectionNode _variantSection;

        public VariantGroupNode(ListNode<DelimitedItemNode<AstNode>> valueList, Token colon, Token openParenthesis, ListNode<FieldDeclNode> fieldDeclList, VariantSectionNode variantSection, Token closeParenthesis, Token semicolon)
        {
            _valueList = valueList;
            _colon = colon;
            _openParenthesis = openParenthesis;
            _fieldDeclList = fieldDeclList;
            _variantSection = variantSection;
            _closeParenthesis = closeParenthesis;
            _semicolon = semicolon;
        }

        public Token CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public ListNode<FieldDeclNode> FieldDeclList
        {
            get { return _fieldDeclList; }
        }
        public Token OpenParenthesis
        {
            get { return _openParenthesis; }
        }
        public Token Semicolon
        {
            get { return _semicolon; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ValueList
        {
            get { return _valueList; }
        }
        public VariantSectionNode VariantSection
        {
            get { return _variantSection; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ValueList", ValueList);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("FieldDeclList", FieldDeclList);
                yield return new KeyValuePair<string, AstNode>("VariantSection", VariantSection);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVariantGroupNode(this);
        }
    }
    public partial class VariantSectionNode : NonterminalNode
    {
        private Token _case;
        private Token _colon;
        private Token _name;
        private Token _of;
        private AstNode _type;
        private ListNode<VariantGroupNode> _variantGroupList;

        public VariantSectionNode(Token theCase, Token name, Token colon, AstNode type, Token of, ListNode<VariantGroupNode> variantGroupList)
        {
            _case = theCase;
            _name = name;
            _colon = colon;
            _type = type;
            _of = of;
            _variantGroupList = variantGroupList;
        }

        public Token Case
        {
            get { return _case; }
        }
        public Token Colon
        {
            get { return _colon; }
        }
        public Token Name
        {
            get { return _name; }
        }
        public Token Of
        {
            get { return _of; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public ListNode<VariantGroupNode> VariantGroupList
        {
            get { return _variantGroupList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Case", Case);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("VariantGroupList", VariantGroupList);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVariantSectionNode(this);
        }
    }
    public partial class VarSectionNode : NonterminalNode
    {
        private Token _var;
        private ListNode<VarDeclNode> _varList;

        public VarSectionNode(Token var, ListNode<VarDeclNode> varList)
        {
            _var = var;
            _varList = varList;
        }

        public Token Var
        {
            get { return _var; }
        }
        public ListNode<VarDeclNode> VarList
        {
            get { return _varList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Var", Var);
                yield return new KeyValuePair<string, AstNode>("VarList", VarList);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVarSectionNode(this);
        }
    }
    public partial class VisibilityNode : NonterminalNode
    {
        private Token _strict;
        private Token _visibility;

        public VisibilityNode(Token strict, Token visibility)
        {
            _strict = strict;
            _visibility = visibility;
        }

        public Token Strict
        {
            get { return _strict; }
        }
        public Token Visibility
        {
            get { return _visibility; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Strict", Strict);
                yield return new KeyValuePair<string, AstNode>("Visibility", Visibility);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVisibilityNode(this);
        }
    }
    public partial class VisibilitySectionNode : NonterminalNode
    {
        private ListNode<AstNode> _contents;
        private VisibilityNode _visibility;

        public VisibilitySectionNode(VisibilityNode visibility, ListNode<AstNode> contents)
        {
            _visibility = visibility;
            _contents = contents;
        }

        public ListNode<AstNode> Contents
        {
            get { return _contents; }
        }
        public VisibilityNode Visibility
        {
            get { return _visibility; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Visibility", Visibility);
                yield return new KeyValuePair<string, AstNode>("Contents", Contents);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVisibilitySectionNode(this);
        }
    }
    public partial class WhileStatementNode : NonterminalNode
    {
        private AstNode _condition;
        private Token _do;
        private AstNode _statement;
        private Token _while;

        public WhileStatementNode(Token theWhile, AstNode condition, Token theDo, AstNode statement)
        {
            _while = theWhile;
            _condition = condition;
            _do = theDo;
            _statement = statement;
        }

        public AstNode Condition
        {
            get { return _condition; }
        }
        public Token Do
        {
            get { return _do; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }
        public Token While
        {
            get { return _while; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("While", While);
                yield return new KeyValuePair<string, AstNode>("Condition", Condition);
                yield return new KeyValuePair<string, AstNode>("Do", Do);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitWhileStatementNode(this);
        }
    }
    public partial class WithStatementNode : NonterminalNode
    {
        private Token _do;
        private ListNode<DelimitedItemNode<AstNode>> _expressionList;
        private AstNode _statement;
        private Token _with;

        public WithStatementNode(Token with, ListNode<DelimitedItemNode<AstNode>> expressionList, Token theDo, AstNode statement)
        {
            _with = with;
            _expressionList = expressionList;
            _do = theDo;
            _statement = statement;
        }

        public Token Do
        {
            get { return _do; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ExpressionList
        {
            get { return _expressionList; }
        }
        public AstNode Statement
        {
            get { return _statement; }
        }
        public Token With
        {
            get { return _with; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("With", With);
                yield return new KeyValuePair<string, AstNode>("ExpressionList", ExpressionList);
                yield return new KeyValuePair<string, AstNode>("Do", Do);
                yield return new KeyValuePair<string, AstNode>("Statement", Statement);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitWithStatementNode(this);
        }
    }
}
