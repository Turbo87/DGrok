// Copyright 2007, 2008 Joe White
//
// This file is part of DGrok <http://www.excastle.com/dgrok/>.
//
// DGrok is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// DGrok is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with DGrok.  If not, see <http://www.gnu.org/licenses/>.

// Autogenerated file - do not edit

using System;
using System.Collections.Generic;
using System.Text;
using DGrok.Framework;

namespace DGrok.DelphiNodes
{
    public partial class ArrayTypeNode : NonterminalNode
    {
        private Token _arrayKeywordNode;
        private Token _closeBracketNode;
        private ListNode<DelimitedItemNode<AstNode>> _indexListNode;
        private Token _ofKeywordNode;
        private Token _openBracketNode;
        private AstNode _typeNode;

        public ArrayTypeNode(Token arrayKeywordNode, Token openBracketNode, ListNode<DelimitedItemNode<AstNode>> indexListNode, Token closeBracketNode, Token ofKeywordNode, AstNode typeNode)
        {
            _arrayKeywordNode = arrayKeywordNode;
            _openBracketNode = openBracketNode;
            _indexListNode = indexListNode;
            _closeBracketNode = closeBracketNode;
            _ofKeywordNode = ofKeywordNode;
            _typeNode = typeNode;
        }

        public Token ArrayKeywordNode
        {
            get { return _arrayKeywordNode; }
        }
        public Token CloseBracketNode
        {
            get { return _closeBracketNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> IndexListNode
        {
            get { return _indexListNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public Token OpenBracketNode
        {
            get { return _openBracketNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ArrayKeywordNode != null)
                    yield return ArrayKeywordNode;
                if (OpenBracketNode != null)
                    yield return OpenBracketNode;
                if (IndexListNode != null)
                    yield return IndexListNode;
                if (CloseBracketNode != null)
                    yield return CloseBracketNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ArrayKeywordNode", ArrayKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OpenBracketNode", OpenBracketNode);
                yield return new KeyValuePair<string, AstNode>("IndexListNode", IndexListNode);
                yield return new KeyValuePair<string, AstNode>("CloseBracketNode", CloseBracketNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitArrayTypeNode(this);
        }
    }
    public partial class AssemblerStatementNode : NonterminalNode
    {
        private Token _asmKeywordNode;
        private Token _endKeywordNode;

        public AssemblerStatementNode(Token asmKeywordNode, Token endKeywordNode)
        {
            _asmKeywordNode = asmKeywordNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token AsmKeywordNode
        {
            get { return _asmKeywordNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (AsmKeywordNode != null)
                    yield return AsmKeywordNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("AsmKeywordNode", AsmKeywordNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitAssemblerStatementNode(this);
        }
    }
    public partial class AttributeNode : NonterminalNode
    {
        private Token _closeBracketNode;
        private Token _colonNode;
        private Token _openBracketNode;
        private Token _scopeNode;
        private AstNode _valueNode;

        public AttributeNode(Token openBracketNode, Token scopeNode, Token colonNode, AstNode valueNode, Token closeBracketNode)
        {
            _openBracketNode = openBracketNode;
            _scopeNode = scopeNode;
            _colonNode = colonNode;
            _valueNode = valueNode;
            _closeBracketNode = closeBracketNode;
        }

        public Token CloseBracketNode
        {
            get { return _closeBracketNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token OpenBracketNode
        {
            get { return _openBracketNode; }
        }
        public Token ScopeNode
        {
            get { return _scopeNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OpenBracketNode != null)
                    yield return OpenBracketNode;
                if (ScopeNode != null)
                    yield return ScopeNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (ValueNode != null)
                    yield return ValueNode;
                if (CloseBracketNode != null)
                    yield return CloseBracketNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenBracketNode", OpenBracketNode);
                yield return new KeyValuePair<string, AstNode>("ScopeNode", ScopeNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
                yield return new KeyValuePair<string, AstNode>("CloseBracketNode", CloseBracketNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitAttributeNode(this);
        }
    }
    public partial class BinaryOperationNode : NonterminalNode
    {
        private AstNode _leftNode;
        private Token _operatorNode;
        private AstNode _rightNode;

        public BinaryOperationNode(AstNode leftNode, Token operatorNode, AstNode rightNode)
        {
            _leftNode = leftNode;
            _operatorNode = operatorNode;
            _rightNode = rightNode;
        }

        public AstNode LeftNode
        {
            get { return _leftNode; }
        }
        public Token OperatorNode
        {
            get { return _operatorNode; }
        }
        public AstNode RightNode
        {
            get { return _rightNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (LeftNode != null)
                    yield return LeftNode;
                if (OperatorNode != null)
                    yield return OperatorNode;
                if (RightNode != null)
                    yield return RightNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("LeftNode", LeftNode);
                yield return new KeyValuePair<string, AstNode>("OperatorNode", OperatorNode);
                yield return new KeyValuePair<string, AstNode>("RightNode", RightNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitBinaryOperationNode(this);
        }
    }
    public partial class BlockNode : NonterminalNode
    {
        private Token _beginKeywordNode;
        private Token _endKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _statementListNode;

        public BlockNode(Token beginKeywordNode, ListNode<DelimitedItemNode<AstNode>> statementListNode, Token endKeywordNode)
        {
            _beginKeywordNode = beginKeywordNode;
            _statementListNode = statementListNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token BeginKeywordNode
        {
            get { return _beginKeywordNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> StatementListNode
        {
            get { return _statementListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (BeginKeywordNode != null)
                    yield return BeginKeywordNode;
                if (StatementListNode != null)
                    yield return StatementListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("BeginKeywordNode", BeginKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementListNode", StatementListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitBlockNode(this);
        }
    }
    public partial class CaseSelectorNode : NonterminalNode
    {
        private Token _colonNode;
        private Token _semicolonNode;
        private AstNode _statementNode;
        private ListNode<DelimitedItemNode<AstNode>> _valueListNode;

        public CaseSelectorNode(ListNode<DelimitedItemNode<AstNode>> valueListNode, Token colonNode, AstNode statementNode, Token semicolonNode)
        {
            _valueListNode = valueListNode;
            _colonNode = colonNode;
            _statementNode = statementNode;
            _semicolonNode = semicolonNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ValueListNode
        {
            get { return _valueListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ValueListNode != null)
                    yield return ValueListNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (StatementNode != null)
                    yield return StatementNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ValueListNode", ValueListNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitCaseSelectorNode(this);
        }
    }
    public partial class CaseStatementNode : NonterminalNode
    {
        private Token _caseKeywordNode;
        private Token _elseKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _elseStatementListNode;
        private Token _endKeywordNode;
        private AstNode _expressionNode;
        private Token _ofKeywordNode;
        private ListNode<CaseSelectorNode> _selectorListNode;

        public CaseStatementNode(Token caseKeywordNode, AstNode expressionNode, Token ofKeywordNode, ListNode<CaseSelectorNode> selectorListNode, Token elseKeywordNode, ListNode<DelimitedItemNode<AstNode>> elseStatementListNode, Token endKeywordNode)
        {
            _caseKeywordNode = caseKeywordNode;
            _expressionNode = expressionNode;
            _ofKeywordNode = ofKeywordNode;
            _selectorListNode = selectorListNode;
            _elseKeywordNode = elseKeywordNode;
            _elseStatementListNode = elseStatementListNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token CaseKeywordNode
        {
            get { return _caseKeywordNode; }
        }
        public Token ElseKeywordNode
        {
            get { return _elseKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ElseStatementListNode
        {
            get { return _elseStatementListNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public AstNode ExpressionNode
        {
            get { return _expressionNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public ListNode<CaseSelectorNode> SelectorListNode
        {
            get { return _selectorListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (CaseKeywordNode != null)
                    yield return CaseKeywordNode;
                if (ExpressionNode != null)
                    yield return ExpressionNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (SelectorListNode != null)
                    yield return SelectorListNode;
                if (ElseKeywordNode != null)
                    yield return ElseKeywordNode;
                if (ElseStatementListNode != null)
                    yield return ElseStatementListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("CaseKeywordNode", CaseKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ExpressionNode", ExpressionNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("SelectorListNode", SelectorListNode);
                yield return new KeyValuePair<string, AstNode>("ElseKeywordNode", ElseKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ElseStatementListNode", ElseStatementListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitCaseStatementNode(this);
        }
    }
    public partial class ClassOfNode : NonterminalNode
    {
        private Token _classKeywordNode;
        private Token _ofKeywordNode;
        private AstNode _typeNode;

        public ClassOfNode(Token classKeywordNode, Token ofKeywordNode, AstNode typeNode)
        {
            _classKeywordNode = classKeywordNode;
            _ofKeywordNode = ofKeywordNode;
            _typeNode = typeNode;
        }

        public Token ClassKeywordNode
        {
            get { return _classKeywordNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ClassKeywordNode != null)
                    yield return ClassKeywordNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ClassKeywordNode", ClassKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitClassOfNode(this);
        }
    }
    public partial class ClassTypeNode : NonterminalNode
    {
        private Token _classKeywordNode;
        private Token _closeParenthesisNode;
        private ListNode<VisibilitySectionNode> _contentListNode;
        private Token _dispositionNode;
        private Token _endKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _inheritanceListNode;
        private Token _openParenthesisNode;

        public ClassTypeNode(Token classKeywordNode, Token dispositionNode, Token openParenthesisNode, ListNode<DelimitedItemNode<AstNode>> inheritanceListNode, Token closeParenthesisNode, ListNode<VisibilitySectionNode> contentListNode, Token endKeywordNode)
        {
            _classKeywordNode = classKeywordNode;
            _dispositionNode = dispositionNode;
            _openParenthesisNode = openParenthesisNode;
            _inheritanceListNode = inheritanceListNode;
            _closeParenthesisNode = closeParenthesisNode;
            _contentListNode = contentListNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token ClassKeywordNode
        {
            get { return _classKeywordNode; }
        }
        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public ListNode<VisibilitySectionNode> ContentListNode
        {
            get { return _contentListNode; }
        }
        public Token DispositionNode
        {
            get { return _dispositionNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> InheritanceListNode
        {
            get { return _inheritanceListNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ClassKeywordNode != null)
                    yield return ClassKeywordNode;
                if (DispositionNode != null)
                    yield return DispositionNode;
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (InheritanceListNode != null)
                    yield return InheritanceListNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
                if (ContentListNode != null)
                    yield return ContentListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ClassKeywordNode", ClassKeywordNode);
                yield return new KeyValuePair<string, AstNode>("DispositionNode", DispositionNode);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("InheritanceListNode", InheritanceListNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ContentListNode", ContentListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitClassTypeNode(this);
        }
    }
    public partial class ConstantDeclNode : NonterminalNode
    {
        private Token _colonNode;
        private Token _equalSignNode;
        private Token _nameNode;
        private ListNode<Token> _portabilityDirectiveListNode;
        private Token _semicolonNode;
        private AstNode _typeNode;
        private AstNode _valueNode;

        public ConstantDeclNode(Token nameNode, Token colonNode, AstNode typeNode, Token equalSignNode, AstNode valueNode, ListNode<Token> portabilityDirectiveListNode, Token semicolonNode)
        {
            _nameNode = nameNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _equalSignNode = equalSignNode;
            _valueNode = valueNode;
            _portabilityDirectiveListNode = portabilityDirectiveListNode;
            _semicolonNode = semicolonNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public ListNode<Token> PortabilityDirectiveListNode
        {
            get { return _portabilityDirectiveListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (ValueNode != null)
                    yield return ValueNode;
                if (PortabilityDirectiveListNode != null)
                    yield return PortabilityDirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveListNode", PortabilityDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitConstantDeclNode(this);
        }
    }
    public partial class ConstantListNode : NonterminalNode
    {
        private Token _closeParenthesisNode;
        private ListNode<DelimitedItemNode<AstNode>> _itemListNode;
        private Token _openParenthesisNode;

        public ConstantListNode(Token openParenthesisNode, ListNode<DelimitedItemNode<AstNode>> itemListNode, Token closeParenthesisNode)
        {
            _openParenthesisNode = openParenthesisNode;
            _itemListNode = itemListNode;
            _closeParenthesisNode = closeParenthesisNode;
        }

        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ItemListNode
        {
            get { return _itemListNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (ItemListNode != null)
                    yield return ItemListNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ItemListNode", ItemListNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitConstantListNode(this);
        }
    }
    public partial class ConstSectionNode : NonterminalNode
    {
        private Token _constKeywordNode;
        private ListNode<ConstantDeclNode> _constListNode;

        public ConstSectionNode(Token constKeywordNode, ListNode<ConstantDeclNode> constListNode)
        {
            _constKeywordNode = constKeywordNode;
            _constListNode = constListNode;
        }

        public Token ConstKeywordNode
        {
            get { return _constKeywordNode; }
        }
        public ListNode<ConstantDeclNode> ConstListNode
        {
            get { return _constListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ConstKeywordNode != null)
                    yield return ConstKeywordNode;
                if (ConstListNode != null)
                    yield return ConstListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ConstKeywordNode", ConstKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ConstListNode", ConstListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitConstSectionNode(this);
        }
    }
    public partial class DirectiveNode : NonterminalNode
    {
        private AstNode _dataNode;
        private Token _keywordNode;
        private Token _semicolonNode;
        private AstNode _valueNode;

        public DirectiveNode(Token semicolonNode, Token keywordNode, AstNode valueNode, AstNode dataNode)
        {
            _semicolonNode = semicolonNode;
            _keywordNode = keywordNode;
            _valueNode = valueNode;
            _dataNode = dataNode;
        }

        public AstNode DataNode
        {
            get { return _dataNode; }
        }
        public Token KeywordNode
        {
            get { return _keywordNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (SemicolonNode != null)
                    yield return SemicolonNode;
                if (KeywordNode != null)
                    yield return KeywordNode;
                if (ValueNode != null)
                    yield return ValueNode;
                if (DataNode != null)
                    yield return DataNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
                yield return new KeyValuePair<string, AstNode>("KeywordNode", KeywordNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
                yield return new KeyValuePair<string, AstNode>("DataNode", DataNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitDirectiveNode(this);
        }
    }
    public partial class EnumeratedTypeElementNode : NonterminalNode
    {
        private Token _equalSignNode;
        private Token _nameNode;
        private AstNode _valueNode;

        public EnumeratedTypeElementNode(Token nameNode, Token equalSignNode, AstNode valueNode)
        {
            _nameNode = nameNode;
            _equalSignNode = equalSignNode;
            _valueNode = valueNode;
        }

        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (ValueNode != null)
                    yield return ValueNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitEnumeratedTypeElementNode(this);
        }
    }
    public partial class EnumeratedTypeNode : NonterminalNode
    {
        private Token _closeParenthesisNode;
        private ListNode<DelimitedItemNode<EnumeratedTypeElementNode>> _itemListNode;
        private Token _openParenthesisNode;

        public EnumeratedTypeNode(Token openParenthesisNode, ListNode<DelimitedItemNode<EnumeratedTypeElementNode>> itemListNode, Token closeParenthesisNode)
        {
            _openParenthesisNode = openParenthesisNode;
            _itemListNode = itemListNode;
            _closeParenthesisNode = closeParenthesisNode;
        }

        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public ListNode<DelimitedItemNode<EnumeratedTypeElementNode>> ItemListNode
        {
            get { return _itemListNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (ItemListNode != null)
                    yield return ItemListNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ItemListNode", ItemListNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitEnumeratedTypeNode(this);
        }
    }
    public partial class ExceptionItemNode : NonterminalNode
    {
        private Token _colonNode;
        private Token _doKeywordNode;
        private Token _nameNode;
        private Token _onSemikeywordNode;
        private Token _semicolonNode;
        private AstNode _statementNode;
        private AstNode _typeNode;

        public ExceptionItemNode(Token onSemikeywordNode, Token nameNode, Token colonNode, AstNode typeNode, Token doKeywordNode, AstNode statementNode, Token semicolonNode)
        {
            _onSemikeywordNode = onSemikeywordNode;
            _nameNode = nameNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _doKeywordNode = doKeywordNode;
            _statementNode = statementNode;
            _semicolonNode = semicolonNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token DoKeywordNode
        {
            get { return _doKeywordNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public Token OnSemikeywordNode
        {
            get { return _onSemikeywordNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OnSemikeywordNode != null)
                    yield return OnSemikeywordNode;
                if (NameNode != null)
                    yield return NameNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (DoKeywordNode != null)
                    yield return DoKeywordNode;
                if (StatementNode != null)
                    yield return StatementNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OnSemikeywordNode", OnSemikeywordNode);
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("DoKeywordNode", DoKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExceptionItemNode(this);
        }
    }
    public partial class ExportsItemNode : NonterminalNode
    {
        private AstNode _nameNode;
        private ListNode<ExportsSpecifierNode> _specifierListNode;

        public ExportsItemNode(AstNode nameNode, ListNode<ExportsSpecifierNode> specifierListNode)
        {
            _nameNode = nameNode;
            _specifierListNode = specifierListNode;
        }

        public AstNode NameNode
        {
            get { return _nameNode; }
        }
        public ListNode<ExportsSpecifierNode> SpecifierListNode
        {
            get { return _specifierListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (SpecifierListNode != null)
                    yield return SpecifierListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("SpecifierListNode", SpecifierListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExportsItemNode(this);
        }
    }
    public partial class ExportsSpecifierNode : NonterminalNode
    {
        private Token _keywordNode;
        private AstNode _valueNode;

        public ExportsSpecifierNode(Token keywordNode, AstNode valueNode)
        {
            _keywordNode = keywordNode;
            _valueNode = valueNode;
        }

        public Token KeywordNode
        {
            get { return _keywordNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (KeywordNode != null)
                    yield return KeywordNode;
                if (ValueNode != null)
                    yield return ValueNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("KeywordNode", KeywordNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExportsSpecifierNode(this);
        }
    }
    public partial class ExportsStatementNode : NonterminalNode
    {
        private Token _exportsKeywordNode;
        private ListNode<DelimitedItemNode<ExportsItemNode>> _itemListNode;
        private Token _semicolonNode;

        public ExportsStatementNode(Token exportsKeywordNode, ListNode<DelimitedItemNode<ExportsItemNode>> itemListNode, Token semicolonNode)
        {
            _exportsKeywordNode = exportsKeywordNode;
            _itemListNode = itemListNode;
            _semicolonNode = semicolonNode;
        }

        public Token ExportsKeywordNode
        {
            get { return _exportsKeywordNode; }
        }
        public ListNode<DelimitedItemNode<ExportsItemNode>> ItemListNode
        {
            get { return _itemListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ExportsKeywordNode != null)
                    yield return ExportsKeywordNode;
                if (ItemListNode != null)
                    yield return ItemListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ExportsKeywordNode", ExportsKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ItemListNode", ItemListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitExportsStatementNode(this);
        }
    }
    public partial class FancyBlockNode : NonterminalNode
    {
        private AstNode _blockNode;
        private ListNode<AstNode> _declListNode;

        public FancyBlockNode(ListNode<AstNode> declListNode, AstNode blockNode)
        {
            _declListNode = declListNode;
            _blockNode = blockNode;
        }

        public AstNode BlockNode
        {
            get { return _blockNode; }
        }
        public ListNode<AstNode> DeclListNode
        {
            get { return _declListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (DeclListNode != null)
                    yield return DeclListNode;
                if (BlockNode != null)
                    yield return BlockNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("DeclListNode", DeclListNode);
                yield return new KeyValuePair<string, AstNode>("BlockNode", BlockNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFancyBlockNode(this);
        }
    }
    public partial class FieldDeclNode : NonterminalNode
    {
        private Token _colonNode;
        private ListNode<DelimitedItemNode<Token>> _nameListNode;
        private ListNode<Token> _portabilityDirectiveListNode;
        private Token _semicolonNode;
        private AstNode _typeNode;

        public FieldDeclNode(ListNode<DelimitedItemNode<Token>> nameListNode, Token colonNode, AstNode typeNode, ListNode<Token> portabilityDirectiveListNode, Token semicolonNode)
        {
            _nameListNode = nameListNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _portabilityDirectiveListNode = portabilityDirectiveListNode;
            _semicolonNode = semicolonNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public ListNode<DelimitedItemNode<Token>> NameListNode
        {
            get { return _nameListNode; }
        }
        public ListNode<Token> PortabilityDirectiveListNode
        {
            get { return _portabilityDirectiveListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameListNode != null)
                    yield return NameListNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (PortabilityDirectiveListNode != null)
                    yield return PortabilityDirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameListNode", NameListNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveListNode", PortabilityDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFieldDeclNode(this);
        }
    }
    public partial class FieldSectionNode : NonterminalNode
    {
        private Token _classKeywordNode;
        private ListNode<FieldDeclNode> _fieldListNode;
        private Token _varKeywordNode;

        public FieldSectionNode(Token classKeywordNode, Token varKeywordNode, ListNode<FieldDeclNode> fieldListNode)
        {
            _classKeywordNode = classKeywordNode;
            _varKeywordNode = varKeywordNode;
            _fieldListNode = fieldListNode;
        }

        public Token ClassKeywordNode
        {
            get { return _classKeywordNode; }
        }
        public ListNode<FieldDeclNode> FieldListNode
        {
            get { return _fieldListNode; }
        }
        public Token VarKeywordNode
        {
            get { return _varKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ClassKeywordNode != null)
                    yield return ClassKeywordNode;
                if (VarKeywordNode != null)
                    yield return VarKeywordNode;
                if (FieldListNode != null)
                    yield return FieldListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ClassKeywordNode", ClassKeywordNode);
                yield return new KeyValuePair<string, AstNode>("VarKeywordNode", VarKeywordNode);
                yield return new KeyValuePair<string, AstNode>("FieldListNode", FieldListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFieldSectionNode(this);
        }
    }
    public partial class FileTypeNode : NonterminalNode
    {
        private Token _fileKeywordNode;
        private Token _ofKeywordNode;
        private AstNode _typeNode;

        public FileTypeNode(Token fileKeywordNode, Token ofKeywordNode, AstNode typeNode)
        {
            _fileKeywordNode = fileKeywordNode;
            _ofKeywordNode = ofKeywordNode;
            _typeNode = typeNode;
        }

        public Token FileKeywordNode
        {
            get { return _fileKeywordNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (FileKeywordNode != null)
                    yield return FileKeywordNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("FileKeywordNode", FileKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitFileTypeNode(this);
        }
    }
    public partial class ForInStatementNode : NonterminalNode
    {
        private Token _doKeywordNode;
        private AstNode _expressionNode;
        private Token _forKeywordNode;
        private Token _inKeywordNode;
        private Token _loopVariableNode;
        private AstNode _statementNode;

        public ForInStatementNode(Token forKeywordNode, Token loopVariableNode, Token inKeywordNode, AstNode expressionNode, Token doKeywordNode, AstNode statementNode)
        {
            _forKeywordNode = forKeywordNode;
            _loopVariableNode = loopVariableNode;
            _inKeywordNode = inKeywordNode;
            _expressionNode = expressionNode;
            _doKeywordNode = doKeywordNode;
            _statementNode = statementNode;
        }

        public Token DoKeywordNode
        {
            get { return _doKeywordNode; }
        }
        public AstNode ExpressionNode
        {
            get { return _expressionNode; }
        }
        public Token ForKeywordNode
        {
            get { return _forKeywordNode; }
        }
        public Token InKeywordNode
        {
            get { return _inKeywordNode; }
        }
        public Token LoopVariableNode
        {
            get { return _loopVariableNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ForKeywordNode != null)
                    yield return ForKeywordNode;
                if (LoopVariableNode != null)
                    yield return LoopVariableNode;
                if (InKeywordNode != null)
                    yield return InKeywordNode;
                if (ExpressionNode != null)
                    yield return ExpressionNode;
                if (DoKeywordNode != null)
                    yield return DoKeywordNode;
                if (StatementNode != null)
                    yield return StatementNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ForKeywordNode", ForKeywordNode);
                yield return new KeyValuePair<string, AstNode>("LoopVariableNode", LoopVariableNode);
                yield return new KeyValuePair<string, AstNode>("InKeywordNode", InKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ExpressionNode", ExpressionNode);
                yield return new KeyValuePair<string, AstNode>("DoKeywordNode", DoKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitForInStatementNode(this);
        }
    }
    public partial class ForStatementNode : NonterminalNode
    {
        private Token _colonEqualsNode;
        private Token _directionNode;
        private Token _doKeywordNode;
        private AstNode _endingValueNode;
        private Token _forKeywordNode;
        private Token _loopVariableNode;
        private AstNode _startingValueNode;
        private AstNode _statementNode;

        public ForStatementNode(Token forKeywordNode, Token loopVariableNode, Token colonEqualsNode, AstNode startingValueNode, Token directionNode, AstNode endingValueNode, Token doKeywordNode, AstNode statementNode)
        {
            _forKeywordNode = forKeywordNode;
            _loopVariableNode = loopVariableNode;
            _colonEqualsNode = colonEqualsNode;
            _startingValueNode = startingValueNode;
            _directionNode = directionNode;
            _endingValueNode = endingValueNode;
            _doKeywordNode = doKeywordNode;
            _statementNode = statementNode;
        }

        public Token ColonEqualsNode
        {
            get { return _colonEqualsNode; }
        }
        public Token DirectionNode
        {
            get { return _directionNode; }
        }
        public Token DoKeywordNode
        {
            get { return _doKeywordNode; }
        }
        public AstNode EndingValueNode
        {
            get { return _endingValueNode; }
        }
        public Token ForKeywordNode
        {
            get { return _forKeywordNode; }
        }
        public Token LoopVariableNode
        {
            get { return _loopVariableNode; }
        }
        public AstNode StartingValueNode
        {
            get { return _startingValueNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ForKeywordNode != null)
                    yield return ForKeywordNode;
                if (LoopVariableNode != null)
                    yield return LoopVariableNode;
                if (ColonEqualsNode != null)
                    yield return ColonEqualsNode;
                if (StartingValueNode != null)
                    yield return StartingValueNode;
                if (DirectionNode != null)
                    yield return DirectionNode;
                if (EndingValueNode != null)
                    yield return EndingValueNode;
                if (DoKeywordNode != null)
                    yield return DoKeywordNode;
                if (StatementNode != null)
                    yield return StatementNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ForKeywordNode", ForKeywordNode);
                yield return new KeyValuePair<string, AstNode>("LoopVariableNode", LoopVariableNode);
                yield return new KeyValuePair<string, AstNode>("ColonEqualsNode", ColonEqualsNode);
                yield return new KeyValuePair<string, AstNode>("StartingValueNode", StartingValueNode);
                yield return new KeyValuePair<string, AstNode>("DirectionNode", DirectionNode);
                yield return new KeyValuePair<string, AstNode>("EndingValueNode", EndingValueNode);
                yield return new KeyValuePair<string, AstNode>("DoKeywordNode", DoKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitForStatementNode(this);
        }
    }
    public partial class GotoStatementNode : NonterminalNode
    {
        private Token _gotoKeywordNode;
        private Token _labelIdNode;

        public GotoStatementNode(Token gotoKeywordNode, Token labelIdNode)
        {
            _gotoKeywordNode = gotoKeywordNode;
            _labelIdNode = labelIdNode;
        }

        public Token GotoKeywordNode
        {
            get { return _gotoKeywordNode; }
        }
        public Token LabelIdNode
        {
            get { return _labelIdNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (GotoKeywordNode != null)
                    yield return GotoKeywordNode;
                if (LabelIdNode != null)
                    yield return LabelIdNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("GotoKeywordNode", GotoKeywordNode);
                yield return new KeyValuePair<string, AstNode>("LabelIdNode", LabelIdNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitGotoStatementNode(this);
        }
    }
    public partial class IfStatementNode : NonterminalNode
    {
        private AstNode _conditionNode;
        private Token _elseKeywordNode;
        private AstNode _elseStatementNode;
        private Token _ifKeywordNode;
        private Token _thenKeywordNode;
        private AstNode _thenStatementNode;

        public IfStatementNode(Token ifKeywordNode, AstNode conditionNode, Token thenKeywordNode, AstNode thenStatementNode, Token elseKeywordNode, AstNode elseStatementNode)
        {
            _ifKeywordNode = ifKeywordNode;
            _conditionNode = conditionNode;
            _thenKeywordNode = thenKeywordNode;
            _thenStatementNode = thenStatementNode;
            _elseKeywordNode = elseKeywordNode;
            _elseStatementNode = elseStatementNode;
        }

        public AstNode ConditionNode
        {
            get { return _conditionNode; }
        }
        public Token ElseKeywordNode
        {
            get { return _elseKeywordNode; }
        }
        public AstNode ElseStatementNode
        {
            get { return _elseStatementNode; }
        }
        public Token IfKeywordNode
        {
            get { return _ifKeywordNode; }
        }
        public Token ThenKeywordNode
        {
            get { return _thenKeywordNode; }
        }
        public AstNode ThenStatementNode
        {
            get { return _thenStatementNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (IfKeywordNode != null)
                    yield return IfKeywordNode;
                if (ConditionNode != null)
                    yield return ConditionNode;
                if (ThenKeywordNode != null)
                    yield return ThenKeywordNode;
                if (ThenStatementNode != null)
                    yield return ThenStatementNode;
                if (ElseKeywordNode != null)
                    yield return ElseKeywordNode;
                if (ElseStatementNode != null)
                    yield return ElseStatementNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("IfKeywordNode", IfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ConditionNode", ConditionNode);
                yield return new KeyValuePair<string, AstNode>("ThenKeywordNode", ThenKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ThenStatementNode", ThenStatementNode);
                yield return new KeyValuePair<string, AstNode>("ElseKeywordNode", ElseKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ElseStatementNode", ElseStatementNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitIfStatementNode(this);
        }
    }
    public partial class InitSectionNode : NonterminalNode
    {
        private Token _endKeywordNode;
        private Token _finalizationKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _finalizationStatementListNode;
        private Token _initializationKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _initializationStatementListNode;

        public InitSectionNode(Token initializationKeywordNode, ListNode<DelimitedItemNode<AstNode>> initializationStatementListNode, Token finalizationKeywordNode, ListNode<DelimitedItemNode<AstNode>> finalizationStatementListNode, Token endKeywordNode)
        {
            _initializationKeywordNode = initializationKeywordNode;
            _initializationStatementListNode = initializationStatementListNode;
            _finalizationKeywordNode = finalizationKeywordNode;
            _finalizationStatementListNode = finalizationStatementListNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public Token FinalizationKeywordNode
        {
            get { return _finalizationKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> FinalizationStatementListNode
        {
            get { return _finalizationStatementListNode; }
        }
        public Token InitializationKeywordNode
        {
            get { return _initializationKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> InitializationStatementListNode
        {
            get { return _initializationStatementListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (InitializationKeywordNode != null)
                    yield return InitializationKeywordNode;
                if (InitializationStatementListNode != null)
                    yield return InitializationStatementListNode;
                if (FinalizationKeywordNode != null)
                    yield return FinalizationKeywordNode;
                if (FinalizationStatementListNode != null)
                    yield return FinalizationStatementListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("InitializationKeywordNode", InitializationKeywordNode);
                yield return new KeyValuePair<string, AstNode>("InitializationStatementListNode", InitializationStatementListNode);
                yield return new KeyValuePair<string, AstNode>("FinalizationKeywordNode", FinalizationKeywordNode);
                yield return new KeyValuePair<string, AstNode>("FinalizationStatementListNode", FinalizationStatementListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitInitSectionNode(this);
        }
    }
    public partial class InterfaceTypeNode : NonterminalNode
    {
        private AstNode _baseInterfaceNode;
        private Token _closeBracketNode;
        private Token _closeParenthesisNode;
        private Token _endKeywordNode;
        private AstNode _guidNode;
        private Token _interfaceKeywordNode;
        private ListNode<AstNode> _methodAndPropertyListNode;
        private Token _openBracketNode;
        private Token _openParenthesisNode;

        public InterfaceTypeNode(Token interfaceKeywordNode, Token openParenthesisNode, AstNode baseInterfaceNode, Token closeParenthesisNode, Token openBracketNode, AstNode guidNode, Token closeBracketNode, ListNode<AstNode> methodAndPropertyListNode, Token endKeywordNode)
        {
            _interfaceKeywordNode = interfaceKeywordNode;
            _openParenthesisNode = openParenthesisNode;
            _baseInterfaceNode = baseInterfaceNode;
            _closeParenthesisNode = closeParenthesisNode;
            _openBracketNode = openBracketNode;
            _guidNode = guidNode;
            _closeBracketNode = closeBracketNode;
            _methodAndPropertyListNode = methodAndPropertyListNode;
            _endKeywordNode = endKeywordNode;
        }

        public AstNode BaseInterfaceNode
        {
            get { return _baseInterfaceNode; }
        }
        public Token CloseBracketNode
        {
            get { return _closeBracketNode; }
        }
        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public AstNode GuidNode
        {
            get { return _guidNode; }
        }
        public Token InterfaceKeywordNode
        {
            get { return _interfaceKeywordNode; }
        }
        public ListNode<AstNode> MethodAndPropertyListNode
        {
            get { return _methodAndPropertyListNode; }
        }
        public Token OpenBracketNode
        {
            get { return _openBracketNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (InterfaceKeywordNode != null)
                    yield return InterfaceKeywordNode;
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (BaseInterfaceNode != null)
                    yield return BaseInterfaceNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
                if (OpenBracketNode != null)
                    yield return OpenBracketNode;
                if (GuidNode != null)
                    yield return GuidNode;
                if (CloseBracketNode != null)
                    yield return CloseBracketNode;
                if (MethodAndPropertyListNode != null)
                    yield return MethodAndPropertyListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("InterfaceKeywordNode", InterfaceKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("BaseInterfaceNode", BaseInterfaceNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("OpenBracketNode", OpenBracketNode);
                yield return new KeyValuePair<string, AstNode>("GuidNode", GuidNode);
                yield return new KeyValuePair<string, AstNode>("CloseBracketNode", CloseBracketNode);
                yield return new KeyValuePair<string, AstNode>("MethodAndPropertyListNode", MethodAndPropertyListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitInterfaceTypeNode(this);
        }
    }
    public partial class LabelDeclSectionNode : NonterminalNode
    {
        private Token _labelKeywordNode;
        private ListNode<DelimitedItemNode<Token>> _labelListNode;
        private Token _semicolonNode;

        public LabelDeclSectionNode(Token labelKeywordNode, ListNode<DelimitedItemNode<Token>> labelListNode, Token semicolonNode)
        {
            _labelKeywordNode = labelKeywordNode;
            _labelListNode = labelListNode;
            _semicolonNode = semicolonNode;
        }

        public Token LabelKeywordNode
        {
            get { return _labelKeywordNode; }
        }
        public ListNode<DelimitedItemNode<Token>> LabelListNode
        {
            get { return _labelListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (LabelKeywordNode != null)
                    yield return LabelKeywordNode;
                if (LabelListNode != null)
                    yield return LabelListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("LabelKeywordNode", LabelKeywordNode);
                yield return new KeyValuePair<string, AstNode>("LabelListNode", LabelListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitLabelDeclSectionNode(this);
        }
    }
    public partial class LabeledStatementNode : NonterminalNode
    {
        private Token _colonNode;
        private Token _labelIdNode;
        private AstNode _statementNode;

        public LabeledStatementNode(Token labelIdNode, Token colonNode, AstNode statementNode)
        {
            _labelIdNode = labelIdNode;
            _colonNode = colonNode;
            _statementNode = statementNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token LabelIdNode
        {
            get { return _labelIdNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (LabelIdNode != null)
                    yield return LabelIdNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (StatementNode != null)
                    yield return StatementNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("LabelIdNode", LabelIdNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitLabeledStatementNode(this);
        }
    }
    public partial class MethodHeadingNode : NonterminalNode
    {
        private Token _classKeywordNode;
        private Token _closeParenthesisNode;
        private Token _colonNode;
        private ListNode<DirectiveNode> _directiveListNode;
        private Token _methodTypeNode;
        private AstNode _nameNode;
        private Token _openParenthesisNode;
        private ListNode<DelimitedItemNode<ParameterNode>> _parameterListNode;
        private AstNode _returnTypeNode;
        private Token _semicolonNode;

        public MethodHeadingNode(Token classKeywordNode, Token methodTypeNode, AstNode nameNode, Token openParenthesisNode, ListNode<DelimitedItemNode<ParameterNode>> parameterListNode, Token closeParenthesisNode, Token colonNode, AstNode returnTypeNode, ListNode<DirectiveNode> directiveListNode, Token semicolonNode)
        {
            _classKeywordNode = classKeywordNode;
            _methodTypeNode = methodTypeNode;
            _nameNode = nameNode;
            _openParenthesisNode = openParenthesisNode;
            _parameterListNode = parameterListNode;
            _closeParenthesisNode = closeParenthesisNode;
            _colonNode = colonNode;
            _returnTypeNode = returnTypeNode;
            _directiveListNode = directiveListNode;
            _semicolonNode = semicolonNode;
        }

        public Token ClassKeywordNode
        {
            get { return _classKeywordNode; }
        }
        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public ListNode<DirectiveNode> DirectiveListNode
        {
            get { return _directiveListNode; }
        }
        public Token MethodTypeNode
        {
            get { return _methodTypeNode; }
        }
        public AstNode NameNode
        {
            get { return _nameNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }
        public ListNode<DelimitedItemNode<ParameterNode>> ParameterListNode
        {
            get { return _parameterListNode; }
        }
        public AstNode ReturnTypeNode
        {
            get { return _returnTypeNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ClassKeywordNode != null)
                    yield return ClassKeywordNode;
                if (MethodTypeNode != null)
                    yield return MethodTypeNode;
                if (NameNode != null)
                    yield return NameNode;
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (ParameterListNode != null)
                    yield return ParameterListNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (ReturnTypeNode != null)
                    yield return ReturnTypeNode;
                if (DirectiveListNode != null)
                    yield return DirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ClassKeywordNode", ClassKeywordNode);
                yield return new KeyValuePair<string, AstNode>("MethodTypeNode", MethodTypeNode);
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ParameterListNode", ParameterListNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("ReturnTypeNode", ReturnTypeNode);
                yield return new KeyValuePair<string, AstNode>("DirectiveListNode", DirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitMethodHeadingNode(this);
        }
    }
    public partial class MethodImplementationNode : NonterminalNode
    {
        private FancyBlockNode _fancyBlockNode;
        private MethodHeadingNode _methodHeadingNode;
        private Token _semicolonNode;

        public MethodImplementationNode(MethodHeadingNode methodHeadingNode, FancyBlockNode fancyBlockNode, Token semicolonNode)
        {
            _methodHeadingNode = methodHeadingNode;
            _fancyBlockNode = fancyBlockNode;
            _semicolonNode = semicolonNode;
        }

        public FancyBlockNode FancyBlockNode
        {
            get { return _fancyBlockNode; }
        }
        public MethodHeadingNode MethodHeadingNode
        {
            get { return _methodHeadingNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (MethodHeadingNode != null)
                    yield return MethodHeadingNode;
                if (FancyBlockNode != null)
                    yield return FancyBlockNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodHeadingNode", MethodHeadingNode);
                yield return new KeyValuePair<string, AstNode>("FancyBlockNode", FancyBlockNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitMethodImplementationNode(this);
        }
    }
    public partial class MethodResolutionNode : NonterminalNode
    {
        private Token _equalSignNode;
        private Token _implementationMethodNode;
        private AstNode _interfaceMethodNode;
        private Token _methodTypeNode;
        private Token _semicolonNode;

        public MethodResolutionNode(Token methodTypeNode, AstNode interfaceMethodNode, Token equalSignNode, Token implementationMethodNode, Token semicolonNode)
        {
            _methodTypeNode = methodTypeNode;
            _interfaceMethodNode = interfaceMethodNode;
            _equalSignNode = equalSignNode;
            _implementationMethodNode = implementationMethodNode;
            _semicolonNode = semicolonNode;
        }

        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public Token ImplementationMethodNode
        {
            get { return _implementationMethodNode; }
        }
        public AstNode InterfaceMethodNode
        {
            get { return _interfaceMethodNode; }
        }
        public Token MethodTypeNode
        {
            get { return _methodTypeNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (MethodTypeNode != null)
                    yield return MethodTypeNode;
                if (InterfaceMethodNode != null)
                    yield return InterfaceMethodNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (ImplementationMethodNode != null)
                    yield return ImplementationMethodNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodTypeNode", MethodTypeNode);
                yield return new KeyValuePair<string, AstNode>("InterfaceMethodNode", InterfaceMethodNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("ImplementationMethodNode", ImplementationMethodNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitMethodResolutionNode(this);
        }
    }
    public partial class NumberFormatNode : NonterminalNode
    {
        private Token _precisionColonNode;
        private AstNode _precisionNode;
        private Token _sizeColonNode;
        private AstNode _sizeNode;
        private AstNode _valueNode;

        public NumberFormatNode(AstNode valueNode, Token sizeColonNode, AstNode sizeNode, Token precisionColonNode, AstNode precisionNode)
        {
            _valueNode = valueNode;
            _sizeColonNode = sizeColonNode;
            _sizeNode = sizeNode;
            _precisionColonNode = precisionColonNode;
            _precisionNode = precisionNode;
        }

        public Token PrecisionColonNode
        {
            get { return _precisionColonNode; }
        }
        public AstNode PrecisionNode
        {
            get { return _precisionNode; }
        }
        public Token SizeColonNode
        {
            get { return _sizeColonNode; }
        }
        public AstNode SizeNode
        {
            get { return _sizeNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ValueNode != null)
                    yield return ValueNode;
                if (SizeColonNode != null)
                    yield return SizeColonNode;
                if (SizeNode != null)
                    yield return SizeNode;
                if (PrecisionColonNode != null)
                    yield return PrecisionColonNode;
                if (PrecisionNode != null)
                    yield return PrecisionNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
                yield return new KeyValuePair<string, AstNode>("SizeColonNode", SizeColonNode);
                yield return new KeyValuePair<string, AstNode>("SizeNode", SizeNode);
                yield return new KeyValuePair<string, AstNode>("PrecisionColonNode", PrecisionColonNode);
                yield return new KeyValuePair<string, AstNode>("PrecisionNode", PrecisionNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitNumberFormatNode(this);
        }
    }
    public partial class OpenArrayNode : NonterminalNode
    {
        private Token _arrayKeywordNode;
        private Token _ofKeywordNode;
        private AstNode _typeNode;

        public OpenArrayNode(Token arrayKeywordNode, Token ofKeywordNode, AstNode typeNode)
        {
            _arrayKeywordNode = arrayKeywordNode;
            _ofKeywordNode = ofKeywordNode;
            _typeNode = typeNode;
        }

        public Token ArrayKeywordNode
        {
            get { return _arrayKeywordNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ArrayKeywordNode != null)
                    yield return ArrayKeywordNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ArrayKeywordNode", ArrayKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitOpenArrayNode(this);
        }
    }
    public partial class PackageNode : NonterminalNode
    {
        private ListNode<AttributeNode> _attributeListNode;
        private UsesClauseNode _containsClauseNode;
        private Token _dotNode;
        private Token _endKeywordNode;
        private AstNode _nameNode;
        private Token _packageKeywordNode;
        private RequiresClauseNode _requiresClauseNode;
        private Token _semicolonNode;

        public PackageNode(Token packageKeywordNode, AstNode nameNode, Token semicolonNode, RequiresClauseNode requiresClauseNode, UsesClauseNode containsClauseNode, ListNode<AttributeNode> attributeListNode, Token endKeywordNode, Token dotNode)
        {
            _packageKeywordNode = packageKeywordNode;
            _nameNode = nameNode;
            _semicolonNode = semicolonNode;
            _requiresClauseNode = requiresClauseNode;
            _containsClauseNode = containsClauseNode;
            _attributeListNode = attributeListNode;
            _endKeywordNode = endKeywordNode;
            _dotNode = dotNode;
        }

        public ListNode<AttributeNode> AttributeListNode
        {
            get { return _attributeListNode; }
        }
        public UsesClauseNode ContainsClauseNode
        {
            get { return _containsClauseNode; }
        }
        public Token DotNode
        {
            get { return _dotNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public AstNode NameNode
        {
            get { return _nameNode; }
        }
        public Token PackageKeywordNode
        {
            get { return _packageKeywordNode; }
        }
        public RequiresClauseNode RequiresClauseNode
        {
            get { return _requiresClauseNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (PackageKeywordNode != null)
                    yield return PackageKeywordNode;
                if (NameNode != null)
                    yield return NameNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
                if (RequiresClauseNode != null)
                    yield return RequiresClauseNode;
                if (ContainsClauseNode != null)
                    yield return ContainsClauseNode;
                if (AttributeListNode != null)
                    yield return AttributeListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
                if (DotNode != null)
                    yield return DotNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("PackageKeywordNode", PackageKeywordNode);
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
                yield return new KeyValuePair<string, AstNode>("RequiresClauseNode", RequiresClauseNode);
                yield return new KeyValuePair<string, AstNode>("ContainsClauseNode", ContainsClauseNode);
                yield return new KeyValuePair<string, AstNode>("AttributeListNode", AttributeListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
                yield return new KeyValuePair<string, AstNode>("DotNode", DotNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPackageNode(this);
        }
    }
    public partial class PackedTypeNode : NonterminalNode
    {
        private Token _packedKeywordNode;
        private AstNode _typeNode;

        public PackedTypeNode(Token packedKeywordNode, AstNode typeNode)
        {
            _packedKeywordNode = packedKeywordNode;
            _typeNode = typeNode;
        }

        public Token PackedKeywordNode
        {
            get { return _packedKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (PackedKeywordNode != null)
                    yield return PackedKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("PackedKeywordNode", PackedKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPackedTypeNode(this);
        }
    }
    public partial class ParameterizedNode : NonterminalNode
    {
        private Token _closeDelimiterNode;
        private AstNode _leftNode;
        private Token _openDelimiterNode;
        private ListNode<DelimitedItemNode<AstNode>> _parameterListNode;

        public ParameterizedNode(AstNode leftNode, Token openDelimiterNode, ListNode<DelimitedItemNode<AstNode>> parameterListNode, Token closeDelimiterNode)
        {
            _leftNode = leftNode;
            _openDelimiterNode = openDelimiterNode;
            _parameterListNode = parameterListNode;
            _closeDelimiterNode = closeDelimiterNode;
        }

        public Token CloseDelimiterNode
        {
            get { return _closeDelimiterNode; }
        }
        public AstNode LeftNode
        {
            get { return _leftNode; }
        }
        public Token OpenDelimiterNode
        {
            get { return _openDelimiterNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ParameterListNode
        {
            get { return _parameterListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (LeftNode != null)
                    yield return LeftNode;
                if (OpenDelimiterNode != null)
                    yield return OpenDelimiterNode;
                if (ParameterListNode != null)
                    yield return ParameterListNode;
                if (CloseDelimiterNode != null)
                    yield return CloseDelimiterNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("LeftNode", LeftNode);
                yield return new KeyValuePair<string, AstNode>("OpenDelimiterNode", OpenDelimiterNode);
                yield return new KeyValuePair<string, AstNode>("ParameterListNode", ParameterListNode);
                yield return new KeyValuePair<string, AstNode>("CloseDelimiterNode", CloseDelimiterNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitParameterizedNode(this);
        }
    }
    public partial class ParameterNode : NonterminalNode
    {
        private Token _colonNode;
        private AstNode _defaultValueNode;
        private Token _equalSignNode;
        private Token _modifierNode;
        private ListNode<DelimitedItemNode<Token>> _nameListNode;
        private AstNode _typeNode;

        public ParameterNode(Token modifierNode, ListNode<DelimitedItemNode<Token>> nameListNode, Token colonNode, AstNode typeNode, Token equalSignNode, AstNode defaultValueNode)
        {
            _modifierNode = modifierNode;
            _nameListNode = nameListNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _equalSignNode = equalSignNode;
            _defaultValueNode = defaultValueNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public AstNode DefaultValueNode
        {
            get { return _defaultValueNode; }
        }
        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public Token ModifierNode
        {
            get { return _modifierNode; }
        }
        public ListNode<DelimitedItemNode<Token>> NameListNode
        {
            get { return _nameListNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ModifierNode != null)
                    yield return ModifierNode;
                if (NameListNode != null)
                    yield return NameListNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (DefaultValueNode != null)
                    yield return DefaultValueNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ModifierNode", ModifierNode);
                yield return new KeyValuePair<string, AstNode>("NameListNode", NameListNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("DefaultValueNode", DefaultValueNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitParameterNode(this);
        }
    }
    public partial class ParenthesizedExpressionNode : NonterminalNode
    {
        private Token _closeParenthesisNode;
        private AstNode _expressionNode;
        private Token _openParenthesisNode;

        public ParenthesizedExpressionNode(Token openParenthesisNode, AstNode expressionNode, Token closeParenthesisNode)
        {
            _openParenthesisNode = openParenthesisNode;
            _expressionNode = expressionNode;
            _closeParenthesisNode = closeParenthesisNode;
        }

        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public AstNode ExpressionNode
        {
            get { return _expressionNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (ExpressionNode != null)
                    yield return ExpressionNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ExpressionNode", ExpressionNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitParenthesizedExpressionNode(this);
        }
    }
    public partial class PointerDereferenceNode : NonterminalNode
    {
        private Token _caretNode;
        private AstNode _operandNode;

        public PointerDereferenceNode(AstNode operandNode, Token caretNode)
        {
            _operandNode = operandNode;
            _caretNode = caretNode;
        }

        public Token CaretNode
        {
            get { return _caretNode; }
        }
        public AstNode OperandNode
        {
            get { return _operandNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OperandNode != null)
                    yield return OperandNode;
                if (CaretNode != null)
                    yield return CaretNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OperandNode", OperandNode);
                yield return new KeyValuePair<string, AstNode>("CaretNode", CaretNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPointerDereferenceNode(this);
        }
    }
    public partial class PointerTypeNode : NonterminalNode
    {
        private Token _caretNode;
        private AstNode _typeNode;

        public PointerTypeNode(Token caretNode, AstNode typeNode)
        {
            _caretNode = caretNode;
            _typeNode = typeNode;
        }

        public Token CaretNode
        {
            get { return _caretNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (CaretNode != null)
                    yield return CaretNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("CaretNode", CaretNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPointerTypeNode(this);
        }
    }
    public partial class ProcedureTypeNode : NonterminalNode
    {
        private Token _closeParenthesisNode;
        private Token _colonNode;
        private ListNode<DirectiveNode> _firstDirectiveListNode;
        private Token _methodTypeNode;
        private Token _objectKeywordNode;
        private Token _ofKeywordNode;
        private Token _openParenthesisNode;
        private ListNode<DelimitedItemNode<ParameterNode>> _parameterListNode;
        private AstNode _returnTypeNode;
        private ListNode<DirectiveNode> _secondDirectiveListNode;

        public ProcedureTypeNode(Token methodTypeNode, Token openParenthesisNode, ListNode<DelimitedItemNode<ParameterNode>> parameterListNode, Token closeParenthesisNode, Token colonNode, AstNode returnTypeNode, ListNode<DirectiveNode> firstDirectiveListNode, Token ofKeywordNode, Token objectKeywordNode, ListNode<DirectiveNode> secondDirectiveListNode)
        {
            _methodTypeNode = methodTypeNode;
            _openParenthesisNode = openParenthesisNode;
            _parameterListNode = parameterListNode;
            _closeParenthesisNode = closeParenthesisNode;
            _colonNode = colonNode;
            _returnTypeNode = returnTypeNode;
            _firstDirectiveListNode = firstDirectiveListNode;
            _ofKeywordNode = ofKeywordNode;
            _objectKeywordNode = objectKeywordNode;
            _secondDirectiveListNode = secondDirectiveListNode;
        }

        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public ListNode<DirectiveNode> FirstDirectiveListNode
        {
            get { return _firstDirectiveListNode; }
        }
        public Token MethodTypeNode
        {
            get { return _methodTypeNode; }
        }
        public Token ObjectKeywordNode
        {
            get { return _objectKeywordNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }
        public ListNode<DelimitedItemNode<ParameterNode>> ParameterListNode
        {
            get { return _parameterListNode; }
        }
        public AstNode ReturnTypeNode
        {
            get { return _returnTypeNode; }
        }
        public ListNode<DirectiveNode> SecondDirectiveListNode
        {
            get { return _secondDirectiveListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (MethodTypeNode != null)
                    yield return MethodTypeNode;
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (ParameterListNode != null)
                    yield return ParameterListNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (ReturnTypeNode != null)
                    yield return ReturnTypeNode;
                if (FirstDirectiveListNode != null)
                    yield return FirstDirectiveListNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (ObjectKeywordNode != null)
                    yield return ObjectKeywordNode;
                if (SecondDirectiveListNode != null)
                    yield return SecondDirectiveListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodTypeNode", MethodTypeNode);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ParameterListNode", ParameterListNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("ReturnTypeNode", ReturnTypeNode);
                yield return new KeyValuePair<string, AstNode>("FirstDirectiveListNode", FirstDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ObjectKeywordNode", ObjectKeywordNode);
                yield return new KeyValuePair<string, AstNode>("SecondDirectiveListNode", SecondDirectiveListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitProcedureTypeNode(this);
        }
    }
    public partial class ProgramNode : NonterminalNode
    {
        private ListNode<AstNode> _declarationListNode;
        private Token _dotNode;
        private InitSectionNode _initSectionNode;
        private Token _nameNode;
        private Token _noiseCloseParenthesisNode;
        private ListNode<DelimitedItemNode<Token>> _noiseContentListNode;
        private Token _noiseOpenParenthesisNode;
        private Token _programKeywordNode;
        private Token _semicolonNode;
        private UsesClauseNode _usesClauseNode;

        public ProgramNode(Token programKeywordNode, Token nameNode, Token noiseOpenParenthesisNode, ListNode<DelimitedItemNode<Token>> noiseContentListNode, Token noiseCloseParenthesisNode, Token semicolonNode, UsesClauseNode usesClauseNode, ListNode<AstNode> declarationListNode, InitSectionNode initSectionNode, Token dotNode)
        {
            _programKeywordNode = programKeywordNode;
            _nameNode = nameNode;
            _noiseOpenParenthesisNode = noiseOpenParenthesisNode;
            _noiseContentListNode = noiseContentListNode;
            _noiseCloseParenthesisNode = noiseCloseParenthesisNode;
            _semicolonNode = semicolonNode;
            _usesClauseNode = usesClauseNode;
            _declarationListNode = declarationListNode;
            _initSectionNode = initSectionNode;
            _dotNode = dotNode;
        }

        public ListNode<AstNode> DeclarationListNode
        {
            get { return _declarationListNode; }
        }
        public Token DotNode
        {
            get { return _dotNode; }
        }
        public InitSectionNode InitSectionNode
        {
            get { return _initSectionNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public Token NoiseCloseParenthesisNode
        {
            get { return _noiseCloseParenthesisNode; }
        }
        public ListNode<DelimitedItemNode<Token>> NoiseContentListNode
        {
            get { return _noiseContentListNode; }
        }
        public Token NoiseOpenParenthesisNode
        {
            get { return _noiseOpenParenthesisNode; }
        }
        public Token ProgramKeywordNode
        {
            get { return _programKeywordNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public UsesClauseNode UsesClauseNode
        {
            get { return _usesClauseNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ProgramKeywordNode != null)
                    yield return ProgramKeywordNode;
                if (NameNode != null)
                    yield return NameNode;
                if (NoiseOpenParenthesisNode != null)
                    yield return NoiseOpenParenthesisNode;
                if (NoiseContentListNode != null)
                    yield return NoiseContentListNode;
                if (NoiseCloseParenthesisNode != null)
                    yield return NoiseCloseParenthesisNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
                if (UsesClauseNode != null)
                    yield return UsesClauseNode;
                if (DeclarationListNode != null)
                    yield return DeclarationListNode;
                if (InitSectionNode != null)
                    yield return InitSectionNode;
                if (DotNode != null)
                    yield return DotNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ProgramKeywordNode", ProgramKeywordNode);
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("NoiseOpenParenthesisNode", NoiseOpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("NoiseContentListNode", NoiseContentListNode);
                yield return new KeyValuePair<string, AstNode>("NoiseCloseParenthesisNode", NoiseCloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
                yield return new KeyValuePair<string, AstNode>("UsesClauseNode", UsesClauseNode);
                yield return new KeyValuePair<string, AstNode>("DeclarationListNode", DeclarationListNode);
                yield return new KeyValuePair<string, AstNode>("InitSectionNode", InitSectionNode);
                yield return new KeyValuePair<string, AstNode>("DotNode", DotNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitProgramNode(this);
        }
    }
    public partial class PropertyNode : NonterminalNode
    {
        private Token _classKeywordNode;
        private Token _closeBracketNode;
        private Token _colonNode;
        private ListNode<DirectiveNode> _directiveListNode;
        private Token _nameNode;
        private Token _openBracketNode;
        private ListNode<DelimitedItemNode<ParameterNode>> _parameterListNode;
        private Token _propertyKeywordNode;
        private Token _semicolonNode;
        private AstNode _typeNode;

        public PropertyNode(Token classKeywordNode, Token propertyKeywordNode, Token nameNode, Token openBracketNode, ListNode<DelimitedItemNode<ParameterNode>> parameterListNode, Token closeBracketNode, Token colonNode, AstNode typeNode, ListNode<DirectiveNode> directiveListNode, Token semicolonNode)
        {
            _classKeywordNode = classKeywordNode;
            _propertyKeywordNode = propertyKeywordNode;
            _nameNode = nameNode;
            _openBracketNode = openBracketNode;
            _parameterListNode = parameterListNode;
            _closeBracketNode = closeBracketNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _directiveListNode = directiveListNode;
            _semicolonNode = semicolonNode;
        }

        public Token ClassKeywordNode
        {
            get { return _classKeywordNode; }
        }
        public Token CloseBracketNode
        {
            get { return _closeBracketNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public ListNode<DirectiveNode> DirectiveListNode
        {
            get { return _directiveListNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public Token OpenBracketNode
        {
            get { return _openBracketNode; }
        }
        public ListNode<DelimitedItemNode<ParameterNode>> ParameterListNode
        {
            get { return _parameterListNode; }
        }
        public Token PropertyKeywordNode
        {
            get { return _propertyKeywordNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ClassKeywordNode != null)
                    yield return ClassKeywordNode;
                if (PropertyKeywordNode != null)
                    yield return PropertyKeywordNode;
                if (NameNode != null)
                    yield return NameNode;
                if (OpenBracketNode != null)
                    yield return OpenBracketNode;
                if (ParameterListNode != null)
                    yield return ParameterListNode;
                if (CloseBracketNode != null)
                    yield return CloseBracketNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (DirectiveListNode != null)
                    yield return DirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ClassKeywordNode", ClassKeywordNode);
                yield return new KeyValuePair<string, AstNode>("PropertyKeywordNode", PropertyKeywordNode);
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("OpenBracketNode", OpenBracketNode);
                yield return new KeyValuePair<string, AstNode>("ParameterListNode", ParameterListNode);
                yield return new KeyValuePair<string, AstNode>("CloseBracketNode", CloseBracketNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("DirectiveListNode", DirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitPropertyNode(this);
        }
    }
    public partial class RaiseStatementNode : NonterminalNode
    {
        private AstNode _addressNode;
        private Token _atSemikeywordNode;
        private AstNode _exceptionNode;
        private Token _raiseKeywordNode;

        public RaiseStatementNode(Token raiseKeywordNode, AstNode exceptionNode, Token atSemikeywordNode, AstNode addressNode)
        {
            _raiseKeywordNode = raiseKeywordNode;
            _exceptionNode = exceptionNode;
            _atSemikeywordNode = atSemikeywordNode;
            _addressNode = addressNode;
        }

        public AstNode AddressNode
        {
            get { return _addressNode; }
        }
        public Token AtSemikeywordNode
        {
            get { return _atSemikeywordNode; }
        }
        public AstNode ExceptionNode
        {
            get { return _exceptionNode; }
        }
        public Token RaiseKeywordNode
        {
            get { return _raiseKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (RaiseKeywordNode != null)
                    yield return RaiseKeywordNode;
                if (ExceptionNode != null)
                    yield return ExceptionNode;
                if (AtSemikeywordNode != null)
                    yield return AtSemikeywordNode;
                if (AddressNode != null)
                    yield return AddressNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("RaiseKeywordNode", RaiseKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ExceptionNode", ExceptionNode);
                yield return new KeyValuePair<string, AstNode>("AtSemikeywordNode", AtSemikeywordNode);
                yield return new KeyValuePair<string, AstNode>("AddressNode", AddressNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRaiseStatementNode(this);
        }
    }
    public partial class RecordFieldConstantNode : NonterminalNode
    {
        private Token _colonNode;
        private AstNode _nameNode;
        private AstNode _valueNode;

        public RecordFieldConstantNode(AstNode nameNode, Token colonNode, AstNode valueNode)
        {
            _nameNode = nameNode;
            _colonNode = colonNode;
            _valueNode = valueNode;
        }

        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public AstNode NameNode
        {
            get { return _nameNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (ValueNode != null)
                    yield return ValueNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRecordFieldConstantNode(this);
        }
    }
    public partial class RecordTypeNode : NonterminalNode
    {
        private ListNode<VisibilitySectionNode> _contentListNode;
        private Token _endKeywordNode;
        private Token _recordKeywordNode;
        private VariantSectionNode _variantSectionNode;

        public RecordTypeNode(Token recordKeywordNode, ListNode<VisibilitySectionNode> contentListNode, VariantSectionNode variantSectionNode, Token endKeywordNode)
        {
            _recordKeywordNode = recordKeywordNode;
            _contentListNode = contentListNode;
            _variantSectionNode = variantSectionNode;
            _endKeywordNode = endKeywordNode;
        }

        public ListNode<VisibilitySectionNode> ContentListNode
        {
            get { return _contentListNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public Token RecordKeywordNode
        {
            get { return _recordKeywordNode; }
        }
        public VariantSectionNode VariantSectionNode
        {
            get { return _variantSectionNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (RecordKeywordNode != null)
                    yield return RecordKeywordNode;
                if (ContentListNode != null)
                    yield return ContentListNode;
                if (VariantSectionNode != null)
                    yield return VariantSectionNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("RecordKeywordNode", RecordKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ContentListNode", ContentListNode);
                yield return new KeyValuePair<string, AstNode>("VariantSectionNode", VariantSectionNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRecordTypeNode(this);
        }
    }
    public partial class RepeatStatementNode : NonterminalNode
    {
        private AstNode _conditionNode;
        private Token _repeatKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _statementListNode;
        private Token _untilKeywordNode;

        public RepeatStatementNode(Token repeatKeywordNode, ListNode<DelimitedItemNode<AstNode>> statementListNode, Token untilKeywordNode, AstNode conditionNode)
        {
            _repeatKeywordNode = repeatKeywordNode;
            _statementListNode = statementListNode;
            _untilKeywordNode = untilKeywordNode;
            _conditionNode = conditionNode;
        }

        public AstNode ConditionNode
        {
            get { return _conditionNode; }
        }
        public Token RepeatKeywordNode
        {
            get { return _repeatKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> StatementListNode
        {
            get { return _statementListNode; }
        }
        public Token UntilKeywordNode
        {
            get { return _untilKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (RepeatKeywordNode != null)
                    yield return RepeatKeywordNode;
                if (StatementListNode != null)
                    yield return StatementListNode;
                if (UntilKeywordNode != null)
                    yield return UntilKeywordNode;
                if (ConditionNode != null)
                    yield return ConditionNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("RepeatKeywordNode", RepeatKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementListNode", StatementListNode);
                yield return new KeyValuePair<string, AstNode>("UntilKeywordNode", UntilKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ConditionNode", ConditionNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRepeatStatementNode(this);
        }
    }
    public partial class RequiresClauseNode : NonterminalNode
    {
        private ListNode<DelimitedItemNode<AstNode>> _packageListNode;
        private Token _requiresSemikeywordNode;
        private Token _semicolonNode;

        public RequiresClauseNode(Token requiresSemikeywordNode, ListNode<DelimitedItemNode<AstNode>> packageListNode, Token semicolonNode)
        {
            _requiresSemikeywordNode = requiresSemikeywordNode;
            _packageListNode = packageListNode;
            _semicolonNode = semicolonNode;
        }

        public ListNode<DelimitedItemNode<AstNode>> PackageListNode
        {
            get { return _packageListNode; }
        }
        public Token RequiresSemikeywordNode
        {
            get { return _requiresSemikeywordNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (RequiresSemikeywordNode != null)
                    yield return RequiresSemikeywordNode;
                if (PackageListNode != null)
                    yield return PackageListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("RequiresSemikeywordNode", RequiresSemikeywordNode);
                yield return new KeyValuePair<string, AstNode>("PackageListNode", PackageListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitRequiresClauseNode(this);
        }
    }
    public partial class SetLiteralNode : NonterminalNode
    {
        private Token _closeBracketNode;
        private ListNode<DelimitedItemNode<AstNode>> _itemListNode;
        private Token _openBracketNode;

        public SetLiteralNode(Token openBracketNode, ListNode<DelimitedItemNode<AstNode>> itemListNode, Token closeBracketNode)
        {
            _openBracketNode = openBracketNode;
            _itemListNode = itemListNode;
            _closeBracketNode = closeBracketNode;
        }

        public Token CloseBracketNode
        {
            get { return _closeBracketNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ItemListNode
        {
            get { return _itemListNode; }
        }
        public Token OpenBracketNode
        {
            get { return _openBracketNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OpenBracketNode != null)
                    yield return OpenBracketNode;
                if (ItemListNode != null)
                    yield return ItemListNode;
                if (CloseBracketNode != null)
                    yield return CloseBracketNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenBracketNode", OpenBracketNode);
                yield return new KeyValuePair<string, AstNode>("ItemListNode", ItemListNode);
                yield return new KeyValuePair<string, AstNode>("CloseBracketNode", CloseBracketNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitSetLiteralNode(this);
        }
    }
    public partial class SetOfNode : NonterminalNode
    {
        private Token _ofKeywordNode;
        private Token _setKeywordNode;
        private AstNode _typeNode;

        public SetOfNode(Token setKeywordNode, Token ofKeywordNode, AstNode typeNode)
        {
            _setKeywordNode = setKeywordNode;
            _ofKeywordNode = ofKeywordNode;
            _typeNode = typeNode;
        }

        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public Token SetKeywordNode
        {
            get { return _setKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (SetKeywordNode != null)
                    yield return SetKeywordNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("SetKeywordNode", SetKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitSetOfNode(this);
        }
    }
    public partial class StringOfLengthNode : NonterminalNode
    {
        private Token _closeBracketNode;
        private AstNode _lengthNode;
        private Token _openBracketNode;
        private Token _stringKeywordNode;

        public StringOfLengthNode(Token stringKeywordNode, Token openBracketNode, AstNode lengthNode, Token closeBracketNode)
        {
            _stringKeywordNode = stringKeywordNode;
            _openBracketNode = openBracketNode;
            _lengthNode = lengthNode;
            _closeBracketNode = closeBracketNode;
        }

        public Token CloseBracketNode
        {
            get { return _closeBracketNode; }
        }
        public AstNode LengthNode
        {
            get { return _lengthNode; }
        }
        public Token OpenBracketNode
        {
            get { return _openBracketNode; }
        }
        public Token StringKeywordNode
        {
            get { return _stringKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (StringKeywordNode != null)
                    yield return StringKeywordNode;
                if (OpenBracketNode != null)
                    yield return OpenBracketNode;
                if (LengthNode != null)
                    yield return LengthNode;
                if (CloseBracketNode != null)
                    yield return CloseBracketNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("StringKeywordNode", StringKeywordNode);
                yield return new KeyValuePair<string, AstNode>("OpenBracketNode", OpenBracketNode);
                yield return new KeyValuePair<string, AstNode>("LengthNode", LengthNode);
                yield return new KeyValuePair<string, AstNode>("CloseBracketNode", CloseBracketNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitStringOfLengthNode(this);
        }
    }
    public partial class TryExceptNode : NonterminalNode
    {
        private Token _elseKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _elseStatementListNode;
        private Token _endKeywordNode;
        private ListNode<ExceptionItemNode> _exceptionItemListNode;
        private Token _exceptKeywordNode;
        private Token _tryKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _tryStatementListNode;

        public TryExceptNode(Token tryKeywordNode, ListNode<DelimitedItemNode<AstNode>> tryStatementListNode, Token exceptKeywordNode, ListNode<ExceptionItemNode> exceptionItemListNode, Token elseKeywordNode, ListNode<DelimitedItemNode<AstNode>> elseStatementListNode, Token endKeywordNode)
        {
            _tryKeywordNode = tryKeywordNode;
            _tryStatementListNode = tryStatementListNode;
            _exceptKeywordNode = exceptKeywordNode;
            _exceptionItemListNode = exceptionItemListNode;
            _elseKeywordNode = elseKeywordNode;
            _elseStatementListNode = elseStatementListNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token ElseKeywordNode
        {
            get { return _elseKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ElseStatementListNode
        {
            get { return _elseStatementListNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public ListNode<ExceptionItemNode> ExceptionItemListNode
        {
            get { return _exceptionItemListNode; }
        }
        public Token ExceptKeywordNode
        {
            get { return _exceptKeywordNode; }
        }
        public Token TryKeywordNode
        {
            get { return _tryKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> TryStatementListNode
        {
            get { return _tryStatementListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (TryKeywordNode != null)
                    yield return TryKeywordNode;
                if (TryStatementListNode != null)
                    yield return TryStatementListNode;
                if (ExceptKeywordNode != null)
                    yield return ExceptKeywordNode;
                if (ExceptionItemListNode != null)
                    yield return ExceptionItemListNode;
                if (ElseKeywordNode != null)
                    yield return ElseKeywordNode;
                if (ElseStatementListNode != null)
                    yield return ElseStatementListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("TryKeywordNode", TryKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TryStatementListNode", TryStatementListNode);
                yield return new KeyValuePair<string, AstNode>("ExceptKeywordNode", ExceptKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ExceptionItemListNode", ExceptionItemListNode);
                yield return new KeyValuePair<string, AstNode>("ElseKeywordNode", ElseKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ElseStatementListNode", ElseStatementListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTryExceptNode(this);
        }
    }
    public partial class TryFinallyNode : NonterminalNode
    {
        private Token _endKeywordNode;
        private Token _finallyKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _finallyStatementListNode;
        private Token _tryKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _tryStatementListNode;

        public TryFinallyNode(Token tryKeywordNode, ListNode<DelimitedItemNode<AstNode>> tryStatementListNode, Token finallyKeywordNode, ListNode<DelimitedItemNode<AstNode>> finallyStatementListNode, Token endKeywordNode)
        {
            _tryKeywordNode = tryKeywordNode;
            _tryStatementListNode = tryStatementListNode;
            _finallyKeywordNode = finallyKeywordNode;
            _finallyStatementListNode = finallyStatementListNode;
            _endKeywordNode = endKeywordNode;
        }

        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public Token FinallyKeywordNode
        {
            get { return _finallyKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> FinallyStatementListNode
        {
            get { return _finallyStatementListNode; }
        }
        public Token TryKeywordNode
        {
            get { return _tryKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> TryStatementListNode
        {
            get { return _tryStatementListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (TryKeywordNode != null)
                    yield return TryKeywordNode;
                if (TryStatementListNode != null)
                    yield return TryStatementListNode;
                if (FinallyKeywordNode != null)
                    yield return FinallyKeywordNode;
                if (FinallyStatementListNode != null)
                    yield return FinallyStatementListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("TryKeywordNode", TryKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TryStatementListNode", TryStatementListNode);
                yield return new KeyValuePair<string, AstNode>("FinallyKeywordNode", FinallyKeywordNode);
                yield return new KeyValuePair<string, AstNode>("FinallyStatementListNode", FinallyStatementListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTryFinallyNode(this);
        }
    }
    public partial class TypeDeclNode : NonterminalNode
    {
        private Token _equalSignNode;
        private Token _nameNode;
        private ListNode<Token> _portabilityDirectiveListNode;
        private Token _semicolonNode;
        private Token _typeKeywordNode;
        private AstNode _typeNode;

        public TypeDeclNode(Token nameNode, Token equalSignNode, Token typeKeywordNode, AstNode typeNode, ListNode<Token> portabilityDirectiveListNode, Token semicolonNode)
        {
            _nameNode = nameNode;
            _equalSignNode = equalSignNode;
            _typeKeywordNode = typeKeywordNode;
            _typeNode = typeNode;
            _portabilityDirectiveListNode = portabilityDirectiveListNode;
            _semicolonNode = semicolonNode;
        }

        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public ListNode<Token> PortabilityDirectiveListNode
        {
            get { return _portabilityDirectiveListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public Token TypeKeywordNode
        {
            get { return _typeKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (TypeKeywordNode != null)
                    yield return TypeKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (PortabilityDirectiveListNode != null)
                    yield return PortabilityDirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("TypeKeywordNode", TypeKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveListNode", PortabilityDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeDeclNode(this);
        }
    }
    public partial class TypeForwardDeclarationNode : NonterminalNode
    {
        private Token _equalSignNode;
        private Token _nameNode;
        private Token _semicolonNode;
        private Token _typeNode;

        public TypeForwardDeclarationNode(Token nameNode, Token equalSignNode, Token typeNode, Token semicolonNode)
        {
            _nameNode = nameNode;
            _equalSignNode = equalSignNode;
            _typeNode = typeNode;
            _semicolonNode = semicolonNode;
        }

        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public Token TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeForwardDeclarationNode(this);
        }
    }
    public partial class TypeHelperNode : NonterminalNode
    {
        private AstNode _baseHelperTypeNode;
        private Token _closeParenthesisNode;
        private ListNode<VisibilitySectionNode> _contentListNode;
        private Token _endKeywordNode;
        private Token _forKeywordNode;
        private Token _helperSemikeywordNode;
        private Token _openParenthesisNode;
        private Token _typeKeywordNode;
        private AstNode _typeNode;

        public TypeHelperNode(Token typeKeywordNode, Token helperSemikeywordNode, Token openParenthesisNode, AstNode baseHelperTypeNode, Token closeParenthesisNode, Token forKeywordNode, AstNode typeNode, ListNode<VisibilitySectionNode> contentListNode, Token endKeywordNode)
        {
            _typeKeywordNode = typeKeywordNode;
            _helperSemikeywordNode = helperSemikeywordNode;
            _openParenthesisNode = openParenthesisNode;
            _baseHelperTypeNode = baseHelperTypeNode;
            _closeParenthesisNode = closeParenthesisNode;
            _forKeywordNode = forKeywordNode;
            _typeNode = typeNode;
            _contentListNode = contentListNode;
            _endKeywordNode = endKeywordNode;
        }

        public AstNode BaseHelperTypeNode
        {
            get { return _baseHelperTypeNode; }
        }
        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public ListNode<VisibilitySectionNode> ContentListNode
        {
            get { return _contentListNode; }
        }
        public Token EndKeywordNode
        {
            get { return _endKeywordNode; }
        }
        public Token ForKeywordNode
        {
            get { return _forKeywordNode; }
        }
        public Token HelperSemikeywordNode
        {
            get { return _helperSemikeywordNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }
        public Token TypeKeywordNode
        {
            get { return _typeKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (TypeKeywordNode != null)
                    yield return TypeKeywordNode;
                if (HelperSemikeywordNode != null)
                    yield return HelperSemikeywordNode;
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (BaseHelperTypeNode != null)
                    yield return BaseHelperTypeNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
                if (ForKeywordNode != null)
                    yield return ForKeywordNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (ContentListNode != null)
                    yield return ContentListNode;
                if (EndKeywordNode != null)
                    yield return EndKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("TypeKeywordNode", TypeKeywordNode);
                yield return new KeyValuePair<string, AstNode>("HelperSemikeywordNode", HelperSemikeywordNode);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("BaseHelperTypeNode", BaseHelperTypeNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("ForKeywordNode", ForKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("ContentListNode", ContentListNode);
                yield return new KeyValuePair<string, AstNode>("EndKeywordNode", EndKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeHelperNode(this);
        }
    }
    public partial class TypeSectionNode : NonterminalNode
    {
        private Token _typeKeywordNode;
        private ListNode<AstNode> _typeListNode;

        public TypeSectionNode(Token typeKeywordNode, ListNode<AstNode> typeListNode)
        {
            _typeKeywordNode = typeKeywordNode;
            _typeListNode = typeListNode;
        }

        public Token TypeKeywordNode
        {
            get { return _typeKeywordNode; }
        }
        public ListNode<AstNode> TypeListNode
        {
            get { return _typeListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (TypeKeywordNode != null)
                    yield return TypeKeywordNode;
                if (TypeListNode != null)
                    yield return TypeListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("TypeKeywordNode", TypeKeywordNode);
                yield return new KeyValuePair<string, AstNode>("TypeListNode", TypeListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitTypeSectionNode(this);
        }
    }
    public partial class UnaryOperationNode : NonterminalNode
    {
        private AstNode _operandNode;
        private Token _operatorNode;

        public UnaryOperationNode(Token operatorNode, AstNode operandNode)
        {
            _operatorNode = operatorNode;
            _operandNode = operandNode;
        }

        public AstNode OperandNode
        {
            get { return _operandNode; }
        }
        public Token OperatorNode
        {
            get { return _operatorNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (OperatorNode != null)
                    yield return OperatorNode;
                if (OperandNode != null)
                    yield return OperandNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OperatorNode", OperatorNode);
                yield return new KeyValuePair<string, AstNode>("OperandNode", OperandNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUnaryOperationNode(this);
        }
    }
    public partial class UnitNode : NonterminalNode
    {
        private Token _dotNode;
        private UnitSectionNode _implementationSectionNode;
        private InitSectionNode _initSectionNode;
        private UnitSectionNode _interfaceSectionNode;
        private ListNode<Token> _portabilityDirectiveListNode;
        private Token _semicolonNode;
        private Token _unitKeywordNode;
        private Token _unitNameNode;

        public UnitNode(Token unitKeywordNode, Token unitNameNode, ListNode<Token> portabilityDirectiveListNode, Token semicolonNode, UnitSectionNode interfaceSectionNode, UnitSectionNode implementationSectionNode, InitSectionNode initSectionNode, Token dotNode)
        {
            _unitKeywordNode = unitKeywordNode;
            _unitNameNode = unitNameNode;
            _portabilityDirectiveListNode = portabilityDirectiveListNode;
            _semicolonNode = semicolonNode;
            _interfaceSectionNode = interfaceSectionNode;
            _implementationSectionNode = implementationSectionNode;
            _initSectionNode = initSectionNode;
            _dotNode = dotNode;
        }

        public Token DotNode
        {
            get { return _dotNode; }
        }
        public UnitSectionNode ImplementationSectionNode
        {
            get { return _implementationSectionNode; }
        }
        public InitSectionNode InitSectionNode
        {
            get { return _initSectionNode; }
        }
        public UnitSectionNode InterfaceSectionNode
        {
            get { return _interfaceSectionNode; }
        }
        public ListNode<Token> PortabilityDirectiveListNode
        {
            get { return _portabilityDirectiveListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public Token UnitKeywordNode
        {
            get { return _unitKeywordNode; }
        }
        public Token UnitNameNode
        {
            get { return _unitNameNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (UnitKeywordNode != null)
                    yield return UnitKeywordNode;
                if (UnitNameNode != null)
                    yield return UnitNameNode;
                if (PortabilityDirectiveListNode != null)
                    yield return PortabilityDirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
                if (InterfaceSectionNode != null)
                    yield return InterfaceSectionNode;
                if (ImplementationSectionNode != null)
                    yield return ImplementationSectionNode;
                if (InitSectionNode != null)
                    yield return InitSectionNode;
                if (DotNode != null)
                    yield return DotNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("UnitKeywordNode", UnitKeywordNode);
                yield return new KeyValuePair<string, AstNode>("UnitNameNode", UnitNameNode);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveListNode", PortabilityDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
                yield return new KeyValuePair<string, AstNode>("InterfaceSectionNode", InterfaceSectionNode);
                yield return new KeyValuePair<string, AstNode>("ImplementationSectionNode", ImplementationSectionNode);
                yield return new KeyValuePair<string, AstNode>("InitSectionNode", InitSectionNode);
                yield return new KeyValuePair<string, AstNode>("DotNode", DotNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUnitNode(this);
        }
    }
    public partial class UnitSectionNode : NonterminalNode
    {
        private ListNode<AstNode> _contentListNode;
        private Token _headerKeywordNode;
        private UsesClauseNode _usesClauseNode;

        public UnitSectionNode(Token headerKeywordNode, UsesClauseNode usesClauseNode, ListNode<AstNode> contentListNode)
        {
            _headerKeywordNode = headerKeywordNode;
            _usesClauseNode = usesClauseNode;
            _contentListNode = contentListNode;
        }

        public ListNode<AstNode> ContentListNode
        {
            get { return _contentListNode; }
        }
        public Token HeaderKeywordNode
        {
            get { return _headerKeywordNode; }
        }
        public UsesClauseNode UsesClauseNode
        {
            get { return _usesClauseNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (HeaderKeywordNode != null)
                    yield return HeaderKeywordNode;
                if (UsesClauseNode != null)
                    yield return UsesClauseNode;
                if (ContentListNode != null)
                    yield return ContentListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("HeaderKeywordNode", HeaderKeywordNode);
                yield return new KeyValuePair<string, AstNode>("UsesClauseNode", UsesClauseNode);
                yield return new KeyValuePair<string, AstNode>("ContentListNode", ContentListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUnitSectionNode(this);
        }
    }
    public partial class UsedUnitNode : NonterminalNode
    {
        private Token _fileNameNode;
        private Token _inKeywordNode;
        private AstNode _nameNode;

        public UsedUnitNode(AstNode nameNode, Token inKeywordNode, Token fileNameNode)
        {
            _nameNode = nameNode;
            _inKeywordNode = inKeywordNode;
            _fileNameNode = fileNameNode;
        }

        public Token FileNameNode
        {
            get { return _fileNameNode; }
        }
        public Token InKeywordNode
        {
            get { return _inKeywordNode; }
        }
        public AstNode NameNode
        {
            get { return _nameNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameNode != null)
                    yield return NameNode;
                if (InKeywordNode != null)
                    yield return InKeywordNode;
                if (FileNameNode != null)
                    yield return FileNameNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("InKeywordNode", InKeywordNode);
                yield return new KeyValuePair<string, AstNode>("FileNameNode", FileNameNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUsedUnitNode(this);
        }
    }
    public partial class UsesClauseNode : NonterminalNode
    {
        private Token _semicolonNode;
        private ListNode<DelimitedItemNode<UsedUnitNode>> _unitListNode;
        private Token _usesKeywordNode;

        public UsesClauseNode(Token usesKeywordNode, ListNode<DelimitedItemNode<UsedUnitNode>> unitListNode, Token semicolonNode)
        {
            _usesKeywordNode = usesKeywordNode;
            _unitListNode = unitListNode;
            _semicolonNode = semicolonNode;
        }

        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public ListNode<DelimitedItemNode<UsedUnitNode>> UnitListNode
        {
            get { return _unitListNode; }
        }
        public Token UsesKeywordNode
        {
            get { return _usesKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (UsesKeywordNode != null)
                    yield return UsesKeywordNode;
                if (UnitListNode != null)
                    yield return UnitListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("UsesKeywordNode", UsesKeywordNode);
                yield return new KeyValuePair<string, AstNode>("UnitListNode", UnitListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitUsesClauseNode(this);
        }
    }
    public partial class VarDeclNode : NonterminalNode
    {
        private AstNode _absoluteAddressNode;
        private Token _absoluteSemikeywordNode;
        private Token _colonNode;
        private Token _equalSignNode;
        private ListNode<Token> _firstPortabilityDirectiveListNode;
        private ListNode<DelimitedItemNode<Token>> _nameListNode;
        private ListNode<Token> _secondPortabilityDirectiveListNode;
        private Token _semicolonNode;
        private AstNode _typeNode;
        private AstNode _valueNode;

        public VarDeclNode(ListNode<DelimitedItemNode<Token>> nameListNode, Token colonNode, AstNode typeNode, ListNode<Token> firstPortabilityDirectiveListNode, Token absoluteSemikeywordNode, AstNode absoluteAddressNode, Token equalSignNode, AstNode valueNode, ListNode<Token> secondPortabilityDirectiveListNode, Token semicolonNode)
        {
            _nameListNode = nameListNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _firstPortabilityDirectiveListNode = firstPortabilityDirectiveListNode;
            _absoluteSemikeywordNode = absoluteSemikeywordNode;
            _absoluteAddressNode = absoluteAddressNode;
            _equalSignNode = equalSignNode;
            _valueNode = valueNode;
            _secondPortabilityDirectiveListNode = secondPortabilityDirectiveListNode;
            _semicolonNode = semicolonNode;
        }

        public AstNode AbsoluteAddressNode
        {
            get { return _absoluteAddressNode; }
        }
        public Token AbsoluteSemikeywordNode
        {
            get { return _absoluteSemikeywordNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token EqualSignNode
        {
            get { return _equalSignNode; }
        }
        public ListNode<Token> FirstPortabilityDirectiveListNode
        {
            get { return _firstPortabilityDirectiveListNode; }
        }
        public ListNode<DelimitedItemNode<Token>> NameListNode
        {
            get { return _nameListNode; }
        }
        public ListNode<Token> SecondPortabilityDirectiveListNode
        {
            get { return _secondPortabilityDirectiveListNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }
        public AstNode ValueNode
        {
            get { return _valueNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (NameListNode != null)
                    yield return NameListNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (FirstPortabilityDirectiveListNode != null)
                    yield return FirstPortabilityDirectiveListNode;
                if (AbsoluteSemikeywordNode != null)
                    yield return AbsoluteSemikeywordNode;
                if (AbsoluteAddressNode != null)
                    yield return AbsoluteAddressNode;
                if (EqualSignNode != null)
                    yield return EqualSignNode;
                if (ValueNode != null)
                    yield return ValueNode;
                if (SecondPortabilityDirectiveListNode != null)
                    yield return SecondPortabilityDirectiveListNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameListNode", NameListNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("FirstPortabilityDirectiveListNode", FirstPortabilityDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("AbsoluteSemikeywordNode", AbsoluteSemikeywordNode);
                yield return new KeyValuePair<string, AstNode>("AbsoluteAddressNode", AbsoluteAddressNode);
                yield return new KeyValuePair<string, AstNode>("EqualSignNode", EqualSignNode);
                yield return new KeyValuePair<string, AstNode>("ValueNode", ValueNode);
                yield return new KeyValuePair<string, AstNode>("SecondPortabilityDirectiveListNode", SecondPortabilityDirectiveListNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVarDeclNode(this);
        }
    }
    public partial class VariantGroupNode : NonterminalNode
    {
        private Token _closeParenthesisNode;
        private Token _colonNode;
        private ListNode<FieldDeclNode> _fieldDeclListNode;
        private Token _openParenthesisNode;
        private Token _semicolonNode;
        private ListNode<DelimitedItemNode<AstNode>> _valueListNode;
        private VariantSectionNode _variantSectionNode;

        public VariantGroupNode(ListNode<DelimitedItemNode<AstNode>> valueListNode, Token colonNode, Token openParenthesisNode, ListNode<FieldDeclNode> fieldDeclListNode, VariantSectionNode variantSectionNode, Token closeParenthesisNode, Token semicolonNode)
        {
            _valueListNode = valueListNode;
            _colonNode = colonNode;
            _openParenthesisNode = openParenthesisNode;
            _fieldDeclListNode = fieldDeclListNode;
            _variantSectionNode = variantSectionNode;
            _closeParenthesisNode = closeParenthesisNode;
            _semicolonNode = semicolonNode;
        }

        public Token CloseParenthesisNode
        {
            get { return _closeParenthesisNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public ListNode<FieldDeclNode> FieldDeclListNode
        {
            get { return _fieldDeclListNode; }
        }
        public Token OpenParenthesisNode
        {
            get { return _openParenthesisNode; }
        }
        public Token SemicolonNode
        {
            get { return _semicolonNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ValueListNode
        {
            get { return _valueListNode; }
        }
        public VariantSectionNode VariantSectionNode
        {
            get { return _variantSectionNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (ValueListNode != null)
                    yield return ValueListNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (OpenParenthesisNode != null)
                    yield return OpenParenthesisNode;
                if (FieldDeclListNode != null)
                    yield return FieldDeclListNode;
                if (VariantSectionNode != null)
                    yield return VariantSectionNode;
                if (CloseParenthesisNode != null)
                    yield return CloseParenthesisNode;
                if (SemicolonNode != null)
                    yield return SemicolonNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("ValueListNode", ValueListNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesisNode", OpenParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("FieldDeclListNode", FieldDeclListNode);
                yield return new KeyValuePair<string, AstNode>("VariantSectionNode", VariantSectionNode);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesisNode", CloseParenthesisNode);
                yield return new KeyValuePair<string, AstNode>("SemicolonNode", SemicolonNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVariantGroupNode(this);
        }
    }
    public partial class VariantSectionNode : NonterminalNode
    {
        private Token _caseKeywordNode;
        private Token _colonNode;
        private Token _nameNode;
        private Token _ofKeywordNode;
        private AstNode _typeNode;
        private ListNode<VariantGroupNode> _variantGroupListNode;

        public VariantSectionNode(Token caseKeywordNode, Token nameNode, Token colonNode, AstNode typeNode, Token ofKeywordNode, ListNode<VariantGroupNode> variantGroupListNode)
        {
            _caseKeywordNode = caseKeywordNode;
            _nameNode = nameNode;
            _colonNode = colonNode;
            _typeNode = typeNode;
            _ofKeywordNode = ofKeywordNode;
            _variantGroupListNode = variantGroupListNode;
        }

        public Token CaseKeywordNode
        {
            get { return _caseKeywordNode; }
        }
        public Token ColonNode
        {
            get { return _colonNode; }
        }
        public Token NameNode
        {
            get { return _nameNode; }
        }
        public Token OfKeywordNode
        {
            get { return _ofKeywordNode; }
        }
        public AstNode TypeNode
        {
            get { return _typeNode; }
        }
        public ListNode<VariantGroupNode> VariantGroupListNode
        {
            get { return _variantGroupListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (CaseKeywordNode != null)
                    yield return CaseKeywordNode;
                if (NameNode != null)
                    yield return NameNode;
                if (ColonNode != null)
                    yield return ColonNode;
                if (TypeNode != null)
                    yield return TypeNode;
                if (OfKeywordNode != null)
                    yield return OfKeywordNode;
                if (VariantGroupListNode != null)
                    yield return VariantGroupListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("CaseKeywordNode", CaseKeywordNode);
                yield return new KeyValuePair<string, AstNode>("NameNode", NameNode);
                yield return new KeyValuePair<string, AstNode>("ColonNode", ColonNode);
                yield return new KeyValuePair<string, AstNode>("TypeNode", TypeNode);
                yield return new KeyValuePair<string, AstNode>("OfKeywordNode", OfKeywordNode);
                yield return new KeyValuePair<string, AstNode>("VariantGroupListNode", VariantGroupListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVariantSectionNode(this);
        }
    }
    public partial class VarSectionNode : NonterminalNode
    {
        private Token _varKeywordNode;
        private ListNode<VarDeclNode> _varListNode;

        public VarSectionNode(Token varKeywordNode, ListNode<VarDeclNode> varListNode)
        {
            _varKeywordNode = varKeywordNode;
            _varListNode = varListNode;
        }

        public Token VarKeywordNode
        {
            get { return _varKeywordNode; }
        }
        public ListNode<VarDeclNode> VarListNode
        {
            get { return _varListNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (VarKeywordNode != null)
                    yield return VarKeywordNode;
                if (VarListNode != null)
                    yield return VarListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("VarKeywordNode", VarKeywordNode);
                yield return new KeyValuePair<string, AstNode>("VarListNode", VarListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVarSectionNode(this);
        }
    }
    public partial class VisibilityNode : NonterminalNode
    {
        private Token _strictSemikeywordNode;
        private Token _visibilityKeywordNode;

        public VisibilityNode(Token strictSemikeywordNode, Token visibilityKeywordNode)
        {
            _strictSemikeywordNode = strictSemikeywordNode;
            _visibilityKeywordNode = visibilityKeywordNode;
        }

        public Token StrictSemikeywordNode
        {
            get { return _strictSemikeywordNode; }
        }
        public Token VisibilityKeywordNode
        {
            get { return _visibilityKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (StrictSemikeywordNode != null)
                    yield return StrictSemikeywordNode;
                if (VisibilityKeywordNode != null)
                    yield return VisibilityKeywordNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("StrictSemikeywordNode", StrictSemikeywordNode);
                yield return new KeyValuePair<string, AstNode>("VisibilityKeywordNode", VisibilityKeywordNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVisibilityNode(this);
        }
    }
    public partial class VisibilitySectionNode : NonterminalNode
    {
        private ListNode<AstNode> _contentListNode;
        private VisibilityNode _visibilityNode;

        public VisibilitySectionNode(VisibilityNode visibilityNode, ListNode<AstNode> contentListNode)
        {
            _visibilityNode = visibilityNode;
            _contentListNode = contentListNode;
        }

        public ListNode<AstNode> ContentListNode
        {
            get { return _contentListNode; }
        }
        public VisibilityNode VisibilityNode
        {
            get { return _visibilityNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (VisibilityNode != null)
                    yield return VisibilityNode;
                if (ContentListNode != null)
                    yield return ContentListNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("VisibilityNode", VisibilityNode);
                yield return new KeyValuePair<string, AstNode>("ContentListNode", ContentListNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitVisibilitySectionNode(this);
        }
    }
    public partial class WhileStatementNode : NonterminalNode
    {
        private AstNode _conditionNode;
        private Token _doKeywordNode;
        private AstNode _statementNode;
        private Token _whileKeywordNode;

        public WhileStatementNode(Token whileKeywordNode, AstNode conditionNode, Token doKeywordNode, AstNode statementNode)
        {
            _whileKeywordNode = whileKeywordNode;
            _conditionNode = conditionNode;
            _doKeywordNode = doKeywordNode;
            _statementNode = statementNode;
        }

        public AstNode ConditionNode
        {
            get { return _conditionNode; }
        }
        public Token DoKeywordNode
        {
            get { return _doKeywordNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }
        public Token WhileKeywordNode
        {
            get { return _whileKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (WhileKeywordNode != null)
                    yield return WhileKeywordNode;
                if (ConditionNode != null)
                    yield return ConditionNode;
                if (DoKeywordNode != null)
                    yield return DoKeywordNode;
                if (StatementNode != null)
                    yield return StatementNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("WhileKeywordNode", WhileKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ConditionNode", ConditionNode);
                yield return new KeyValuePair<string, AstNode>("DoKeywordNode", DoKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitWhileStatementNode(this);
        }
    }
    public partial class WithStatementNode : NonterminalNode
    {
        private Token _doKeywordNode;
        private ListNode<DelimitedItemNode<AstNode>> _expressionListNode;
        private AstNode _statementNode;
        private Token _withKeywordNode;

        public WithStatementNode(Token withKeywordNode, ListNode<DelimitedItemNode<AstNode>> expressionListNode, Token doKeywordNode, AstNode statementNode)
        {
            _withKeywordNode = withKeywordNode;
            _expressionListNode = expressionListNode;
            _doKeywordNode = doKeywordNode;
            _statementNode = statementNode;
        }

        public Token DoKeywordNode
        {
            get { return _doKeywordNode; }
        }
        public ListNode<DelimitedItemNode<AstNode>> ExpressionListNode
        {
            get { return _expressionListNode; }
        }
        public AstNode StatementNode
        {
            get { return _statementNode; }
        }
        public Token WithKeywordNode
        {
            get { return _withKeywordNode; }
        }

        public override IEnumerable<AstNode> ChildNodes
        {
            get
            {
                if (WithKeywordNode != null)
                    yield return WithKeywordNode;
                if (ExpressionListNode != null)
                    yield return ExpressionListNode;
                if (DoKeywordNode != null)
                    yield return DoKeywordNode;
                if (StatementNode != null)
                    yield return StatementNode;
            }
        }
        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("WithKeywordNode", WithKeywordNode);
                yield return new KeyValuePair<string, AstNode>("ExpressionListNode", ExpressionListNode);
                yield return new KeyValuePair<string, AstNode>("DoKeywordNode", DoKeywordNode);
                yield return new KeyValuePair<string, AstNode>("StatementNode", StatementNode);
            }
        }

        public override void Accept(Visitor visitor)
        {
            visitor.VisitWithStatementNode(this);
        }
    }
}
