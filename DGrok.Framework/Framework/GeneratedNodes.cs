// DGrok Delphi parser
// Copyright (C) 2007 Joe White
// http://www.excastle.com/dgrok
//
// Licensed under the Open Software License version 3.0
// http://www.opensource.org/licenses/osl-3.0.php

// Autogenerated file - do not edit

using System;
using System.Collections.Generic;
using System.Text;

namespace DGrok.Framework
{
    public class ArrayTypeNode : NonterminalNode
    {
        private AstNode _array;
        private AstNode _closeBracket;
        private AstNode _indexList;
        private AstNode _of;
        private AstNode _openBracket;
        private AstNode _type;

        public ArrayTypeNode(AstNode array, AstNode openBracket, AstNode indexList, AstNode closeBracket, AstNode of, AstNode type)
        {
            _array = array;
            _openBracket = openBracket;
            _indexList = indexList;
            _closeBracket = closeBracket;
            _of = of;
            _type = type;
        }

        public AstNode Array
        {
            get { return _array; }
        }
        public AstNode CloseBracket
        {
            get { return _closeBracket; }
        }
        public AstNode IndexList
        {
            get { return _indexList; }
        }
        public AstNode Of
        {
            get { return _of; }
        }
        public AstNode OpenBracket
        {
            get { return _openBracket; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Array", Array);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("IndexList", IndexList);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }
    }
    public class AssemblerStatementNode : NonterminalNode
    {
        private AstNode _asm;
        private AstNode _end;

        public AssemblerStatementNode(AstNode asm, AstNode end)
        {
            _asm = asm;
            _end = end;
        }

        public AstNode Asm
        {
            get { return _asm; }
        }
        public AstNode End
        {
            get { return _end; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Asm", Asm);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }
    }
    public class BinaryOperationNode : NonterminalNode
    {
        private AstNode _left;
        private AstNode _operator;
        private AstNode _right;

        public BinaryOperationNode(AstNode left, AstNode theOperator, AstNode right)
        {
            _left = left;
            _operator = theOperator;
            _right = right;
        }

        public AstNode Left
        {
            get { return _left; }
        }
        public AstNode Operator
        {
            get { return _operator; }
        }
        public AstNode Right
        {
            get { return _right; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Left", Left);
                yield return new KeyValuePair<string, AstNode>("Operator", Operator);
                yield return new KeyValuePair<string, AstNode>("Right", Right);
            }
        }
    }
    public class ConstantDeclNode : NonterminalNode
    {
        private AstNode _colon;
        private AstNode _equalSign;
        private AstNode _name;
        private AstNode _portabilityDirectiveList;
        private AstNode _semicolon;
        private AstNode _type;
        private AstNode _value;

        public ConstantDeclNode(AstNode name, AstNode colon, AstNode type, AstNode equalSign, AstNode value, AstNode portabilityDirectiveList, AstNode semicolon)
        {
            _name = name;
            _colon = colon;
            _type = type;
            _equalSign = equalSign;
            _value = value;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode EqualSign
        {
            get { return _equalSign; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class ConstantListNode : NonterminalNode
    {
        private AstNode _closeParenthesis;
        private AstNode _itemList;
        private AstNode _openParenthesis;

        public ConstantListNode(AstNode openParenthesis, AstNode itemList, AstNode closeParenthesis)
        {
            _openParenthesis = openParenthesis;
            _itemList = itemList;
            _closeParenthesis = closeParenthesis;
        }

        public AstNode CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode ItemList
        {
            get { return _itemList; }
        }
        public AstNode OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
            }
        }
    }
    public class ConstSectionNode : NonterminalNode
    {
        private AstNode _const;
        private AstNode _constList;

        public ConstSectionNode(AstNode theConst, AstNode constList)
        {
            _const = theConst;
            _constList = constList;
        }

        public AstNode Const
        {
            get { return _const; }
        }
        public AstNode ConstList
        {
            get { return _constList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Const", Const);
                yield return new KeyValuePair<string, AstNode>("ConstList", ConstList);
            }
        }
    }
    public class ContainsClauseNode : NonterminalNode
    {
        private AstNode _contains;
        private AstNode _identList;
        private AstNode _semicolon;

        public ContainsClauseNode(AstNode contains, AstNode identList, AstNode semicolon)
        {
            _contains = contains;
            _identList = identList;
            _semicolon = semicolon;
        }

        public AstNode Contains
        {
            get { return _contains; }
        }
        public AstNode IdentList
        {
            get { return _identList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Contains", Contains);
                yield return new KeyValuePair<string, AstNode>("IdentList", IdentList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class DelimitedItemNode : NonterminalNode
    {
        private AstNode _delimiter;
        private AstNode _item;

        public DelimitedItemNode(AstNode item, AstNode delimiter)
        {
            _item = item;
            _delimiter = delimiter;
        }

        public AstNode Delimiter
        {
            get { return _delimiter; }
        }
        public AstNode Item
        {
            get { return _item; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Item", Item);
                yield return new KeyValuePair<string, AstNode>("Delimiter", Delimiter);
            }
        }
    }
    public class EnumeratedTypeElementNode : NonterminalNode
    {
        private AstNode _equalSign;
        private AstNode _name;
        private AstNode _value;

        public EnumeratedTypeElementNode(AstNode name, AstNode equalSign, AstNode value)
        {
            _name = name;
            _equalSign = equalSign;
            _value = value;
        }

        public AstNode EqualSign
        {
            get { return _equalSign; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
            }
        }
    }
    public class EnumeratedTypeNode : NonterminalNode
    {
        private AstNode _closeParenthesis;
        private AstNode _itemList;
        private AstNode _openParenthesis;

        public EnumeratedTypeNode(AstNode openParenthesis, AstNode itemList, AstNode closeParenthesis)
        {
            _openParenthesis = openParenthesis;
            _itemList = itemList;
            _closeParenthesis = closeParenthesis;
        }

        public AstNode CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode ItemList
        {
            get { return _itemList; }
        }
        public AstNode OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
            }
        }
    }
    public class ExportsItemNode : NonterminalNode
    {
        private AstNode _name;
        private AstNode _specifierList;

        public ExportsItemNode(AstNode name, AstNode specifierList)
        {
            _name = name;
            _specifierList = specifierList;
        }

        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode SpecifierList
        {
            get { return _specifierList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("SpecifierList", SpecifierList);
            }
        }
    }
    public class ExportsStatementNode : NonterminalNode
    {
        private AstNode _exports;
        private AstNode _itemList;
        private AstNode _semicolon;

        public ExportsStatementNode(AstNode exports, AstNode itemList, AstNode semicolon)
        {
            _exports = exports;
            _itemList = itemList;
            _semicolon = semicolon;
        }

        public AstNode Exports
        {
            get { return _exports; }
        }
        public AstNode ItemList
        {
            get { return _itemList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Exports", Exports);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class ExternalNode : NonterminalNode
    {
        private AstNode _dllName;
        private AstNode _external;
        private AstNode _specifierList;

        public ExternalNode(AstNode external, AstNode dllName, AstNode specifierList)
        {
            _external = external;
            _dllName = dllName;
            _specifierList = specifierList;
        }

        public AstNode DllName
        {
            get { return _dllName; }
        }
        public AstNode External
        {
            get { return _external; }
        }
        public AstNode SpecifierList
        {
            get { return _specifierList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("External", External);
                yield return new KeyValuePair<string, AstNode>("DllName", DllName);
                yield return new KeyValuePair<string, AstNode>("SpecifierList", SpecifierList);
            }
        }
    }
    public class FieldDeclNode : NonterminalNode
    {
        private AstNode _colon;
        private AstNode _nameList;
        private AstNode _portabilityDirectiveList;
        private AstNode _semicolon;
        private AstNode _type;

        public FieldDeclNode(AstNode nameList, AstNode colon, AstNode type, AstNode portabilityDirectiveList, AstNode semicolon)
        {
            _nameList = nameList;
            _colon = colon;
            _type = type;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode NameList
        {
            get { return _nameList; }
        }
        public AstNode PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("NameList", NameList);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class FieldSectionNode : NonterminalNode
    {
        private AstNode _class;
        private AstNode _fieldList;
        private AstNode _var;

        public FieldSectionNode(AstNode theClass, AstNode var, AstNode fieldList)
        {
            _class = theClass;
            _var = var;
            _fieldList = fieldList;
        }

        public AstNode Class
        {
            get { return _class; }
        }
        public AstNode FieldList
        {
            get { return _fieldList; }
        }
        public AstNode Var
        {
            get { return _var; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("Var", Var);
                yield return new KeyValuePair<string, AstNode>("FieldList", FieldList);
            }
        }
    }
    public class FileTypeNode : NonterminalNode
    {
        private AstNode _file;
        private AstNode _of;
        private AstNode _type;

        public FileTypeNode(AstNode file, AstNode of, AstNode type)
        {
            _file = file;
            _of = of;
            _type = type;
        }

        public AstNode File
        {
            get { return _file; }
        }
        public AstNode Of
        {
            get { return _of; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("File", File);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }
    }
    public class GotoStatementNode : NonterminalNode
    {
        private AstNode _goto;
        private AstNode _labelId;

        public GotoStatementNode(AstNode theGoto, AstNode labelId)
        {
            _goto = theGoto;
            _labelId = labelId;
        }

        public AstNode Goto
        {
            get { return _goto; }
        }
        public AstNode LabelId
        {
            get { return _labelId; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Goto", Goto);
                yield return new KeyValuePair<string, AstNode>("LabelId", LabelId);
            }
        }
    }
    public class InitSectionNode : NonterminalNode
    {
        private AstNode _end;
        private AstNode _finalizationHeader;
        private AstNode _finalizationStatements;
        private AstNode _initializationHeader;
        private AstNode _initializationStatements;

        public InitSectionNode(AstNode initializationHeader, AstNode initializationStatements, AstNode finalizationHeader, AstNode finalizationStatements, AstNode end)
        {
            _initializationHeader = initializationHeader;
            _initializationStatements = initializationStatements;
            _finalizationHeader = finalizationHeader;
            _finalizationStatements = finalizationStatements;
            _end = end;
        }

        public AstNode End
        {
            get { return _end; }
        }
        public AstNode FinalizationHeader
        {
            get { return _finalizationHeader; }
        }
        public AstNode FinalizationStatements
        {
            get { return _finalizationStatements; }
        }
        public AstNode InitializationHeader
        {
            get { return _initializationHeader; }
        }
        public AstNode InitializationStatements
        {
            get { return _initializationStatements; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("InitializationHeader", InitializationHeader);
                yield return new KeyValuePair<string, AstNode>("InitializationStatements", InitializationStatements);
                yield return new KeyValuePair<string, AstNode>("FinalizationHeader", FinalizationHeader);
                yield return new KeyValuePair<string, AstNode>("FinalizationStatements", FinalizationStatements);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }
    }
    public class InterfaceTypeNode : NonterminalNode
    {
        private AstNode _baseInterface;
        private AstNode _closeBracket;
        private AstNode _closeParenthesis;
        private AstNode _end;
        private AstNode _guid;
        private AstNode _interface;
        private AstNode _methodAndPropertyList;
        private AstNode _openBracket;
        private AstNode _openParenthesis;

        public InterfaceTypeNode(AstNode theInterface, AstNode openParenthesis, AstNode baseInterface, AstNode closeParenthesis, AstNode openBracket, AstNode guid, AstNode closeBracket, AstNode methodAndPropertyList, AstNode end)
        {
            _interface = theInterface;
            _openParenthesis = openParenthesis;
            _baseInterface = baseInterface;
            _closeParenthesis = closeParenthesis;
            _openBracket = openBracket;
            _guid = guid;
            _closeBracket = closeBracket;
            _methodAndPropertyList = methodAndPropertyList;
            _end = end;
        }

        public AstNode BaseInterface
        {
            get { return _baseInterface; }
        }
        public AstNode CloseBracket
        {
            get { return _closeBracket; }
        }
        public AstNode CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode End
        {
            get { return _end; }
        }
        public AstNode Guid
        {
            get { return _guid; }
        }
        public AstNode Interface
        {
            get { return _interface; }
        }
        public AstNode MethodAndPropertyList
        {
            get { return _methodAndPropertyList; }
        }
        public AstNode OpenBracket
        {
            get { return _openBracket; }
        }
        public AstNode OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Interface", Interface);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("BaseInterface", BaseInterface);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("Guid", Guid);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
                yield return new KeyValuePair<string, AstNode>("MethodAndPropertyList", MethodAndPropertyList);
                yield return new KeyValuePair<string, AstNode>("End", End);
            }
        }
    }
    public class LabelDeclSectionNode : NonterminalNode
    {
        private AstNode _label;
        private AstNode _labelList;
        private AstNode _semicolon;

        public LabelDeclSectionNode(AstNode label, AstNode labelList, AstNode semicolon)
        {
            _label = label;
            _labelList = labelList;
            _semicolon = semicolon;
        }

        public AstNode Label
        {
            get { return _label; }
        }
        public AstNode LabelList
        {
            get { return _labelList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Label", Label);
                yield return new KeyValuePair<string, AstNode>("LabelList", LabelList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class MethodHeadingNode : NonterminalNode
    {
        private AstNode _class;
        private AstNode _closeParenthesis;
        private AstNode _colon;
        private AstNode _directiveList;
        private AstNode _methodType;
        private AstNode _name;
        private AstNode _openParenthesis;
        private AstNode _parameterList;
        private AstNode _returnType;
        private AstNode _semicolon;

        public MethodHeadingNode(AstNode theClass, AstNode methodType, AstNode name, AstNode openParenthesis, AstNode parameterList, AstNode closeParenthesis, AstNode colon, AstNode returnType, AstNode semicolon, AstNode directiveList)
        {
            _class = theClass;
            _methodType = methodType;
            _name = name;
            _openParenthesis = openParenthesis;
            _parameterList = parameterList;
            _closeParenthesis = closeParenthesis;
            _colon = colon;
            _returnType = returnType;
            _semicolon = semicolon;
            _directiveList = directiveList;
        }

        public AstNode Class
        {
            get { return _class; }
        }
        public AstNode CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode DirectiveList
        {
            get { return _directiveList; }
        }
        public AstNode MethodType
        {
            get { return _methodType; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode OpenParenthesis
        {
            get { return _openParenthesis; }
        }
        public AstNode ParameterList
        {
            get { return _parameterList; }
        }
        public AstNode ReturnType
        {
            get { return _returnType; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("MethodType", MethodType);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("ReturnType", ReturnType);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("DirectiveList", DirectiveList);
            }
        }
    }
    public class OpenArrayNode : NonterminalNode
    {
        private AstNode _array;
        private AstNode _of;
        private AstNode _type;

        public OpenArrayNode(AstNode array, AstNode of, AstNode type)
        {
            _array = array;
            _of = of;
            _type = type;
        }

        public AstNode Array
        {
            get { return _array; }
        }
        public AstNode Of
        {
            get { return _of; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Array", Array);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }
    }
    public class PackageNode : NonterminalNode
    {
        private AstNode _containsClause;
        private AstNode _dot;
        private AstNode _end;
        private AstNode _name;
        private AstNode _package;
        private AstNode _requiresClause;
        private AstNode _semicolon;

        public PackageNode(AstNode package, AstNode name, AstNode semicolon, AstNode requiresClause, AstNode containsClause, AstNode end, AstNode dot)
        {
            _package = package;
            _name = name;
            _semicolon = semicolon;
            _requiresClause = requiresClause;
            _containsClause = containsClause;
            _end = end;
            _dot = dot;
        }

        public AstNode ContainsClause
        {
            get { return _containsClause; }
        }
        public AstNode Dot
        {
            get { return _dot; }
        }
        public AstNode End
        {
            get { return _end; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode Package
        {
            get { return _package; }
        }
        public AstNode RequiresClause
        {
            get { return _requiresClause; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Package", Package);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("RequiresClause", RequiresClause);
                yield return new KeyValuePair<string, AstNode>("ContainsClause", ContainsClause);
                yield return new KeyValuePair<string, AstNode>("End", End);
                yield return new KeyValuePair<string, AstNode>("Dot", Dot);
            }
        }
    }
    public class ParameterizedDirectiveNode : NonterminalNode
    {
        private AstNode _keyword;
        private AstNode _value;

        public ParameterizedDirectiveNode(AstNode keyword, AstNode value)
        {
            _keyword = keyword;
            _value = value;
        }

        public AstNode Keyword
        {
            get { return _keyword; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Keyword", Keyword);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
            }
        }
    }
    public class ParameterizedNode : NonterminalNode
    {
        private AstNode _closeDelimiter;
        private AstNode _left;
        private AstNode _openDelimiter;
        private AstNode _parameterList;

        public ParameterizedNode(AstNode left, AstNode openDelimiter, AstNode parameterList, AstNode closeDelimiter)
        {
            _left = left;
            _openDelimiter = openDelimiter;
            _parameterList = parameterList;
            _closeDelimiter = closeDelimiter;
        }

        public AstNode CloseDelimiter
        {
            get { return _closeDelimiter; }
        }
        public AstNode Left
        {
            get { return _left; }
        }
        public AstNode OpenDelimiter
        {
            get { return _openDelimiter; }
        }
        public AstNode ParameterList
        {
            get { return _parameterList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Left", Left);
                yield return new KeyValuePair<string, AstNode>("OpenDelimiter", OpenDelimiter);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseDelimiter", CloseDelimiter);
            }
        }
    }
    public class ParameterNode : NonterminalNode
    {
        private AstNode _colon;
        private AstNode _defaultValue;
        private AstNode _equalSign;
        private AstNode _modifier;
        private AstNode _names;
        private AstNode _type;

        public ParameterNode(AstNode modifier, AstNode names, AstNode colon, AstNode type, AstNode equalSign, AstNode defaultValue)
        {
            _modifier = modifier;
            _names = names;
            _colon = colon;
            _type = type;
            _equalSign = equalSign;
            _defaultValue = defaultValue;
        }

        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode DefaultValue
        {
            get { return _defaultValue; }
        }
        public AstNode EqualSign
        {
            get { return _equalSign; }
        }
        public AstNode Modifier
        {
            get { return _modifier; }
        }
        public AstNode Names
        {
            get { return _names; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Modifier", Modifier);
                yield return new KeyValuePair<string, AstNode>("Names", Names);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("DefaultValue", DefaultValue);
            }
        }
    }
    public class ParenthesizedExpressionNode : NonterminalNode
    {
        private AstNode _closeParenthesis;
        private AstNode _expression;
        private AstNode _openParenthesis;

        public ParenthesizedExpressionNode(AstNode openParenthesis, AstNode expression, AstNode closeParenthesis)
        {
            _openParenthesis = openParenthesis;
            _expression = expression;
            _closeParenthesis = closeParenthesis;
        }

        public AstNode CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode Expression
        {
            get { return _expression; }
        }
        public AstNode OpenParenthesis
        {
            get { return _openParenthesis; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("Expression", Expression);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
            }
        }
    }
    public class PointerDereferenceNode : NonterminalNode
    {
        private AstNode _caret;
        private AstNode _operand;

        public PointerDereferenceNode(AstNode operand, AstNode caret)
        {
            _operand = operand;
            _caret = caret;
        }

        public AstNode Caret
        {
            get { return _caret; }
        }
        public AstNode Operand
        {
            get { return _operand; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Operand", Operand);
                yield return new KeyValuePair<string, AstNode>("Caret", Caret);
            }
        }
    }
    public class PointerTypeNode : NonterminalNode
    {
        private AstNode _caret;
        private AstNode _type;

        public PointerTypeNode(AstNode caret, AstNode type)
        {
            _caret = caret;
            _type = type;
        }

        public AstNode Caret
        {
            get { return _caret; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Caret", Caret);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }
    }
    public class ProcedureTypeNode : NonterminalNode
    {
        private AstNode _closeParenthesis;
        private AstNode _colon;
        private AstNode _methodType;
        private AstNode _object;
        private AstNode _of;
        private AstNode _openParenthesis;
        private AstNode _parameterList;
        private AstNode _returnType;

        public ProcedureTypeNode(AstNode methodType, AstNode openParenthesis, AstNode parameterList, AstNode closeParenthesis, AstNode colon, AstNode returnType, AstNode of, AstNode theObject)
        {
            _methodType = methodType;
            _openParenthesis = openParenthesis;
            _parameterList = parameterList;
            _closeParenthesis = closeParenthesis;
            _colon = colon;
            _returnType = returnType;
            _of = of;
            _object = theObject;
        }

        public AstNode CloseParenthesis
        {
            get { return _closeParenthesis; }
        }
        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode MethodType
        {
            get { return _methodType; }
        }
        public AstNode Object
        {
            get { return _object; }
        }
        public AstNode Of
        {
            get { return _of; }
        }
        public AstNode OpenParenthesis
        {
            get { return _openParenthesis; }
        }
        public AstNode ParameterList
        {
            get { return _parameterList; }
        }
        public AstNode ReturnType
        {
            get { return _returnType; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("MethodType", MethodType);
                yield return new KeyValuePair<string, AstNode>("OpenParenthesis", OpenParenthesis);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseParenthesis", CloseParenthesis);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("ReturnType", ReturnType);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Object", Object);
            }
        }
    }
    public class PropertyNode : NonterminalNode
    {
        private AstNode _class;
        private AstNode _closeBracket;
        private AstNode _colon;
        private AstNode _default;
        private AstNode _defaultValue;
        private AstNode _implements;
        private AstNode _implementsSpecifier;
        private AstNode _index;
        private AstNode _indexValue;
        private AstNode _name;
        private AstNode _openBracket;
        private AstNode _parameterList;
        private AstNode _property;
        private AstNode _read;
        private AstNode _readSpecifier;
        private AstNode _semicolon;
        private AstNode _stored;
        private AstNode _storedSpecifier;
        private AstNode _type;
        private AstNode _write;
        private AstNode _writeSpecifier;

        public PropertyNode(AstNode theClass, AstNode property, AstNode name, AstNode openBracket, AstNode parameterList, AstNode closeBracket, AstNode colon, AstNode type, AstNode index, AstNode indexValue, AstNode read, AstNode readSpecifier, AstNode write, AstNode writeSpecifier, AstNode stored, AstNode storedSpecifier, AstNode theDefault, AstNode defaultValue, AstNode implements, AstNode implementsSpecifier, AstNode semicolon)
        {
            _class = theClass;
            _property = property;
            _name = name;
            _openBracket = openBracket;
            _parameterList = parameterList;
            _closeBracket = closeBracket;
            _colon = colon;
            _type = type;
            _index = index;
            _indexValue = indexValue;
            _read = read;
            _readSpecifier = readSpecifier;
            _write = write;
            _writeSpecifier = writeSpecifier;
            _stored = stored;
            _storedSpecifier = storedSpecifier;
            _default = theDefault;
            _defaultValue = defaultValue;
            _implements = implements;
            _implementsSpecifier = implementsSpecifier;
            _semicolon = semicolon;
        }

        public AstNode Class
        {
            get { return _class; }
        }
        public AstNode CloseBracket
        {
            get { return _closeBracket; }
        }
        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode Default
        {
            get { return _default; }
        }
        public AstNode DefaultValue
        {
            get { return _defaultValue; }
        }
        public AstNode Implements
        {
            get { return _implements; }
        }
        public AstNode ImplementsSpecifier
        {
            get { return _implementsSpecifier; }
        }
        public AstNode Index
        {
            get { return _index; }
        }
        public AstNode IndexValue
        {
            get { return _indexValue; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode OpenBracket
        {
            get { return _openBracket; }
        }
        public AstNode ParameterList
        {
            get { return _parameterList; }
        }
        public AstNode Property
        {
            get { return _property; }
        }
        public AstNode Read
        {
            get { return _read; }
        }
        public AstNode ReadSpecifier
        {
            get { return _readSpecifier; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Stored
        {
            get { return _stored; }
        }
        public AstNode StoredSpecifier
        {
            get { return _storedSpecifier; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode Write
        {
            get { return _write; }
        }
        public AstNode WriteSpecifier
        {
            get { return _writeSpecifier; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Class", Class);
                yield return new KeyValuePair<string, AstNode>("Property", Property);
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("ParameterList", ParameterList);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("Index", Index);
                yield return new KeyValuePair<string, AstNode>("IndexValue", IndexValue);
                yield return new KeyValuePair<string, AstNode>("Read", Read);
                yield return new KeyValuePair<string, AstNode>("ReadSpecifier", ReadSpecifier);
                yield return new KeyValuePair<string, AstNode>("Write", Write);
                yield return new KeyValuePair<string, AstNode>("WriteSpecifier", WriteSpecifier);
                yield return new KeyValuePair<string, AstNode>("Stored", Stored);
                yield return new KeyValuePair<string, AstNode>("StoredSpecifier", StoredSpecifier);
                yield return new KeyValuePair<string, AstNode>("Default", Default);
                yield return new KeyValuePair<string, AstNode>("DefaultValue", DefaultValue);
                yield return new KeyValuePair<string, AstNode>("Implements", Implements);
                yield return new KeyValuePair<string, AstNode>("ImplementsSpecifier", ImplementsSpecifier);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class RaiseStatementNode : NonterminalNode
    {
        private AstNode _address;
        private AstNode _at;
        private AstNode _exception;
        private AstNode _raise;

        public RaiseStatementNode(AstNode raise, AstNode exception, AstNode at, AstNode address)
        {
            _raise = raise;
            _exception = exception;
            _at = at;
            _address = address;
        }

        public AstNode Address
        {
            get { return _address; }
        }
        public AstNode At
        {
            get { return _at; }
        }
        public AstNode Exception
        {
            get { return _exception; }
        }
        public AstNode Raise
        {
            get { return _raise; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Raise", Raise);
                yield return new KeyValuePair<string, AstNode>("Exception", Exception);
                yield return new KeyValuePair<string, AstNode>("At", At);
                yield return new KeyValuePair<string, AstNode>("Address", Address);
            }
        }
    }
    public class RecordFieldConstantNode : NonterminalNode
    {
        private AstNode _colon;
        private AstNode _name;
        private AstNode _value;

        public RecordFieldConstantNode(AstNode name, AstNode colon, AstNode value)
        {
            _name = name;
            _colon = colon;
            _value = value;
        }

        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
            }
        }
    }
    public class RequiresClauseNode : NonterminalNode
    {
        private AstNode _identList;
        private AstNode _requires;
        private AstNode _semicolon;

        public RequiresClauseNode(AstNode requires, AstNode identList, AstNode semicolon)
        {
            _requires = requires;
            _identList = identList;
            _semicolon = semicolon;
        }

        public AstNode IdentList
        {
            get { return _identList; }
        }
        public AstNode Requires
        {
            get { return _requires; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Requires", Requires);
                yield return new KeyValuePair<string, AstNode>("IdentList", IdentList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class SetLiteralNode : NonterminalNode
    {
        private AstNode _closeBracket;
        private AstNode _itemList;
        private AstNode _openBracket;

        public SetLiteralNode(AstNode openBracket, AstNode itemList, AstNode closeBracket)
        {
            _openBracket = openBracket;
            _itemList = itemList;
            _closeBracket = closeBracket;
        }

        public AstNode CloseBracket
        {
            get { return _closeBracket; }
        }
        public AstNode ItemList
        {
            get { return _itemList; }
        }
        public AstNode OpenBracket
        {
            get { return _openBracket; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("ItemList", ItemList);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
            }
        }
    }
    public class SetOfNode : NonterminalNode
    {
        private AstNode _of;
        private AstNode _set;
        private AstNode _type;

        public SetOfNode(AstNode set, AstNode of, AstNode type)
        {
            _set = set;
            _of = of;
            _type = type;
        }

        public AstNode Of
        {
            get { return _of; }
        }
        public AstNode Set
        {
            get { return _set; }
        }
        public AstNode Type
        {
            get { return _type; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Set", Set);
                yield return new KeyValuePair<string, AstNode>("Of", Of);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
            }
        }
    }
    public class StringOfLengthNode : NonterminalNode
    {
        private AstNode _closeBracket;
        private AstNode _length;
        private AstNode _openBracket;
        private AstNode _string;

        public StringOfLengthNode(AstNode theString, AstNode openBracket, AstNode length, AstNode closeBracket)
        {
            _string = theString;
            _openBracket = openBracket;
            _length = length;
            _closeBracket = closeBracket;
        }

        public AstNode CloseBracket
        {
            get { return _closeBracket; }
        }
        public AstNode Length
        {
            get { return _length; }
        }
        public AstNode OpenBracket
        {
            get { return _openBracket; }
        }
        public AstNode String
        {
            get { return _string; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("String", String);
                yield return new KeyValuePair<string, AstNode>("OpenBracket", OpenBracket);
                yield return new KeyValuePair<string, AstNode>("Length", Length);
                yield return new KeyValuePair<string, AstNode>("CloseBracket", CloseBracket);
            }
        }
    }
    public class TypeDeclNode : NonterminalNode
    {
        private AstNode _equalSign;
        private AstNode _name;
        private AstNode _portabilityDirectiveList;
        private AstNode _semicolon;
        private AstNode _type;
        private AstNode _typeKeyword;

        public TypeDeclNode(AstNode name, AstNode equalSign, AstNode typeKeyword, AstNode type, AstNode portabilityDirectiveList, AstNode semicolon)
        {
            _name = name;
            _equalSign = equalSign;
            _typeKeyword = typeKeyword;
            _type = type;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public AstNode EqualSign
        {
            get { return _equalSign; }
        }
        public AstNode Name
        {
            get { return _name; }
        }
        public AstNode PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode TypeKeyword
        {
            get { return _typeKeyword; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("TypeKeyword", TypeKeyword);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class TypeSectionNode : NonterminalNode
    {
        private AstNode _type;
        private AstNode _typeList;

        public TypeSectionNode(AstNode type, AstNode typeList)
        {
            _type = type;
            _typeList = typeList;
        }

        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode TypeList
        {
            get { return _typeList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("TypeList", TypeList);
            }
        }
    }
    public class UnaryOperationNode : NonterminalNode
    {
        private AstNode _operand;
        private AstNode _operator;

        public UnaryOperationNode(AstNode theOperator, AstNode operand)
        {
            _operator = theOperator;
            _operand = operand;
        }

        public AstNode Operand
        {
            get { return _operand; }
        }
        public AstNode Operator
        {
            get { return _operator; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Operator", Operator);
                yield return new KeyValuePair<string, AstNode>("Operand", Operand);
            }
        }
    }
    public class UnitNode : NonterminalNode
    {
        private AstNode _dot;
        private AstNode _implementationSection;
        private AstNode _initSection;
        private AstNode _interfaceSection;
        private AstNode _portabilityDirectives;
        private AstNode _semicolon;
        private AstNode _unit;
        private AstNode _unitName;

        public UnitNode(AstNode unit, AstNode unitName, AstNode portabilityDirectives, AstNode semicolon, AstNode interfaceSection, AstNode implementationSection, AstNode initSection, AstNode dot)
        {
            _unit = unit;
            _unitName = unitName;
            _portabilityDirectives = portabilityDirectives;
            _semicolon = semicolon;
            _interfaceSection = interfaceSection;
            _implementationSection = implementationSection;
            _initSection = initSection;
            _dot = dot;
        }

        public AstNode Dot
        {
            get { return _dot; }
        }
        public AstNode ImplementationSection
        {
            get { return _implementationSection; }
        }
        public AstNode InitSection
        {
            get { return _initSection; }
        }
        public AstNode InterfaceSection
        {
            get { return _interfaceSection; }
        }
        public AstNode PortabilityDirectives
        {
            get { return _portabilityDirectives; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Unit
        {
            get { return _unit; }
        }
        public AstNode UnitName
        {
            get { return _unitName; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Unit", Unit);
                yield return new KeyValuePair<string, AstNode>("UnitName", UnitName);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectives", PortabilityDirectives);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
                yield return new KeyValuePair<string, AstNode>("InterfaceSection", InterfaceSection);
                yield return new KeyValuePair<string, AstNode>("ImplementationSection", ImplementationSection);
                yield return new KeyValuePair<string, AstNode>("InitSection", InitSection);
                yield return new KeyValuePair<string, AstNode>("Dot", Dot);
            }
        }
    }
    public class UnitSectionNode : NonterminalNode
    {
        private AstNode _contents;
        private AstNode _headerKeyword;
        private AstNode _usesClause;

        public UnitSectionNode(AstNode headerKeyword, AstNode usesClause, AstNode contents)
        {
            _headerKeyword = headerKeyword;
            _usesClause = usesClause;
            _contents = contents;
        }

        public AstNode Contents
        {
            get { return _contents; }
        }
        public AstNode HeaderKeyword
        {
            get { return _headerKeyword; }
        }
        public AstNode UsesClause
        {
            get { return _usesClause; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("HeaderKeyword", HeaderKeyword);
                yield return new KeyValuePair<string, AstNode>("UsesClause", UsesClause);
                yield return new KeyValuePair<string, AstNode>("Contents", Contents);
            }
        }
    }
    public class UsedUnitNode : NonterminalNode
    {
        private AstNode _fileName;
        private AstNode _in;
        private AstNode _name;

        public UsedUnitNode(AstNode name, AstNode theIn, AstNode fileName)
        {
            _name = name;
            _in = theIn;
            _fileName = fileName;
        }

        public AstNode FileName
        {
            get { return _fileName; }
        }
        public AstNode In
        {
            get { return _in; }
        }
        public AstNode Name
        {
            get { return _name; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Name", Name);
                yield return new KeyValuePair<string, AstNode>("In", In);
                yield return new KeyValuePair<string, AstNode>("FileName", FileName);
            }
        }
    }
    public class UsesClauseNode : NonterminalNode
    {
        private AstNode _semicolon;
        private AstNode _unitList;
        private AstNode _uses;

        public UsesClauseNode(AstNode uses, AstNode unitList, AstNode semicolon)
        {
            _uses = uses;
            _unitList = unitList;
            _semicolon = semicolon;
        }

        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode UnitList
        {
            get { return _unitList; }
        }
        public AstNode Uses
        {
            get { return _uses; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Uses", Uses);
                yield return new KeyValuePair<string, AstNode>("UnitList", UnitList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class VarDeclNode : NonterminalNode
    {
        private AstNode _absolute;
        private AstNode _absoluteAddress;
        private AstNode _colon;
        private AstNode _equalSign;
        private AstNode _names;
        private AstNode _portabilityDirectiveList;
        private AstNode _semicolon;
        private AstNode _type;
        private AstNode _value;

        public VarDeclNode(AstNode names, AstNode colon, AstNode type, AstNode absolute, AstNode absoluteAddress, AstNode equalSign, AstNode value, AstNode portabilityDirectiveList, AstNode semicolon)
        {
            _names = names;
            _colon = colon;
            _type = type;
            _absolute = absolute;
            _absoluteAddress = absoluteAddress;
            _equalSign = equalSign;
            _value = value;
            _portabilityDirectiveList = portabilityDirectiveList;
            _semicolon = semicolon;
        }

        public AstNode Absolute
        {
            get { return _absolute; }
        }
        public AstNode AbsoluteAddress
        {
            get { return _absoluteAddress; }
        }
        public AstNode Colon
        {
            get { return _colon; }
        }
        public AstNode EqualSign
        {
            get { return _equalSign; }
        }
        public AstNode Names
        {
            get { return _names; }
        }
        public AstNode PortabilityDirectiveList
        {
            get { return _portabilityDirectiveList; }
        }
        public AstNode Semicolon
        {
            get { return _semicolon; }
        }
        public AstNode Type
        {
            get { return _type; }
        }
        public AstNode Value
        {
            get { return _value; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Names", Names);
                yield return new KeyValuePair<string, AstNode>("Colon", Colon);
                yield return new KeyValuePair<string, AstNode>("Type", Type);
                yield return new KeyValuePair<string, AstNode>("Absolute", Absolute);
                yield return new KeyValuePair<string, AstNode>("AbsoluteAddress", AbsoluteAddress);
                yield return new KeyValuePair<string, AstNode>("EqualSign", EqualSign);
                yield return new KeyValuePair<string, AstNode>("Value", Value);
                yield return new KeyValuePair<string, AstNode>("PortabilityDirectiveList", PortabilityDirectiveList);
                yield return new KeyValuePair<string, AstNode>("Semicolon", Semicolon);
            }
        }
    }
    public class VarSectionNode : NonterminalNode
    {
        private AstNode _var;
        private AstNode _varList;

        public VarSectionNode(AstNode var, AstNode varList)
        {
            _var = var;
            _varList = varList;
        }

        public AstNode Var
        {
            get { return _var; }
        }
        public AstNode VarList
        {
            get { return _varList; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Var", Var);
                yield return new KeyValuePair<string, AstNode>("VarList", VarList);
            }
        }
    }
    public class VisibilityNode : NonterminalNode
    {
        private AstNode _strict;
        private AstNode _visibility;

        public VisibilityNode(AstNode strict, AstNode visibility)
        {
            _strict = strict;
            _visibility = visibility;
        }

        public AstNode Strict
        {
            get { return _strict; }
        }
        public AstNode Visibility
        {
            get { return _visibility; }
        }

        public override IEnumerable<KeyValuePair<string, AstNode>> Properties
        {
            get
            {
                yield return new KeyValuePair<string, AstNode>("Strict", Strict);
                yield return new KeyValuePair<string, AstNode>("Visibility", Visibility);
            }
        }
    }
}
