NodeTypes:
  ArrayTypeNode:
    - Array
    - OpenBracket
    - IndexList
    - CloseBracket
    - Of
    - Type
  AssemblerStatementNode:
    - Asm
    - End
  BinaryOperationNode:
    - Left
    - Operator
    - Right
  BlockNode:
    - Begin
    - StatementList
    - End
  CaseSelectorNode:
    - {Name: Values, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Colon, Type: Token}
    - {Name: Statement, Type: AstNode}
    - {Name: Semicolon, Type: Token}
  CaseStatementNode:
    - {Name: Case, Type: Token}
    - {Name: Expression, Type: AstNode}
    - {Name: Of, Type: Token}
    - {Name: SelectorList, Type: ListNode<CaseSelectorNode>}
    - {Name: Else, Type: Token}
    - {Name: ElseStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  ClassOfNode:
    - Class
    - Of
    - Type
  ClassTypeNode:
    - Class
    - Disposition
    - OpenParenthesis
    - InheritanceList
    - CloseParenthesis
    - Contents
    - End
  ConstantDeclNode:
    - Name
    - Colon
    - Type
    - EqualSign
    - Value
    - PortabilityDirectiveList
    - Semicolon
  ConstantListNode:
    - OpenParenthesis
    - ItemList
    - CloseParenthesis
  ConstSectionNode:
    - Const
    - ConstList
  ContainsClauseNode:
    - Contains
    - IdentList
    - Semicolon
  DirectiveNode:
    - {Name: Semicolon, Type: Token}
    - {Name: Directive, Type: Token}
    - {Name: Value, Type: AstNode}
    - {Name: Data, Type: AstNode}
  EnumeratedTypeNode:
    - OpenParenthesis
    - ItemList
    - CloseParenthesis
  EnumeratedTypeElementNode:
    - Name
    - EqualSign
    - Value
  ExceptionItemNode:
    - {Name: 'On', Type: Token}
    - {Name: Name, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
    - {Name: Semicolon, Type: Token}
  ExportsItemNode:
    - Name
    - SpecifierList
  ExportsSpecifierNode:
    - Keyword
    - Value
  ExportsStatementNode:
    - Exports
    - ItemList
    - Semicolon
  FancyBlockNode:
    - DeclList
    - Block
  FieldDeclNode:
    - NameList
    - Colon
    - Type
    - PortabilityDirectiveList
    - Semicolon
  FieldSectionNode:
    - Class
    - Var
    - FieldList
  FileTypeNode:
    - File
    - Of
    - Type
  ForInStatementNode:
    - {Name: For, Type: Token}
    - {Name: LoopVariable, Type: Token}
    - {Name: In, Type: Token}
    - {Name: Expression, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
  ForStatementNode:
    - {Name: For, Type: Token}
    - {Name: LoopVariable, Type: Token}
    - {Name: ColonEquals, Type: Token}
    - {Name: StartingValue, Type: AstNode}
    - {Name: Direction, Type: Token}
    - {Name: EndingValue, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
  GotoStatementNode:
    - Goto
    - LabelId
  IfStatementNode:
    - If
    - Condition
    - Then
    - ThenStatement
    - Else
    - ElseStatement
  InitSectionNode:
    - InitializationHeader
    - InitializationStatements
    - FinalizationHeader
    - FinalizationStatements
    - End
  InterfaceTypeNode:
    - Interface
    - OpenParenthesis
    - BaseInterface
    - CloseParenthesis
    - OpenBracket
    - Guid
    - CloseBracket
    - MethodAndPropertyList
    - End
  LabelDeclSectionNode:
    - Label
    - LabelList
    - Semicolon
  LabeledStatementNode:
    - Label
    - Colon
    - Statement
  MethodHeadingNode:
    - {Name: Class, Type: Token}
    - {Name: MethodType, Type: Token}
    - {Name: Name, Type: AstNode}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: ParameterList, Type: ListNode<DelimitedItemNode<ParameterNode>>}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: ReturnType, Type: AstNode}
    - {Name: DirectiveList, Type: ListNode<DirectiveNode>}
    - {Name: Semicolon, Type: Token}
  MethodImplementationNode:
    - MethodHeading
    - FancyBlock
    - Semicolon
  MethodResolutionNode:
    - MethodType
    - InterfaceMethod
    - EqualSign
    - ImplementationMethod
    - Semicolon
  OpenArrayNode:
    - Array
    - Of
    - Type
  PackageNode:
    - Package
    - Name
    - Semicolon
    - RequiresClause
    - ContainsClause
    - End
    - Dot
  PackedTypeNode:
    - Packed
    - Type
  ParameterizedNode:
    - Left
    - OpenDelimiter
    - ParameterList
    - CloseDelimiter
  ParameterNode:
    - Modifier
    - Names
    - Colon
    - Type
    - EqualSign
    - DefaultValue
  ParenthesizedExpressionNode:
    - OpenParenthesis
    - Expression
    - CloseParenthesis
  PointerDereferenceNode:
    - Operand
    - Caret
  PointerTypeNode:
    - Caret
    - Type
  ProcedureTypeNode:
    - MethodType
    - OpenParenthesis
    - ParameterList
    - CloseParenthesis
    - Colon
    - ReturnType
    - FirstDirectives
    - Of
    - Object
    - SecondDirectives
  ProgramNode:
    - Program
    - Name
    - NoiseOpenParenthesis
    - NoiseContents
    - NoiseCloseParenthesis
    - Semicolon
    - UsesClause
    - DeclarationList
    - InitSection
    - Dot
  PropertyNode:
    - Class
    - Property
    - Name
    - OpenBracket
    - ParameterList
    - CloseBracket
    - Colon
    - Type
    - DirectiveList
    - Semicolon
  RaiseStatementNode:
    - Raise
    - Exception
    - At
    - Address
  RecordFieldConstantNode:
    - Name
    - Colon
    - Value
  RecordTypeNode:
    - {Name: Record, Type: Token}
    - {Name: Contents, Type: ListNode<VisibilitySectionNode>}
    - {Name: VariantSection, Type: VariantSectionNode}
    - {Name: End, Type: Token}
  RepeatStatementNode:
    - {Name: Repeat, Type: Token}
    - {Name: StatementList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Until, Type: Token}
    - {Name: Condition, Type: AstNode}
  RequiresClauseNode:
    - Requires
    - IdentList
    - Semicolon
  SetLiteralNode:
    - OpenBracket
    - ItemList
    - CloseBracket
  SetOfNode:
    - Set
    - Of
    - Type
  StringOfLengthNode:
    - String
    - OpenBracket
    - Length
    - CloseBracket
  TryExceptNode:
    - {Name: Try, Type: Token}
    - {Name: TryStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Except, Type: Token}
    - {Name: ExceptionItemList, Type: ListNode<ExceptionItemNode>}
    - {Name: Else, Type: Token}
    - {Name: ElseStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  TryFinallyNode:
    - {Name: Try, Type: Token}
    - {Name: TryStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Finally, Type: Token}
    - {Name: FinallyStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  TypeDeclNode:
    - Name
    - EqualSign
    - TypeKeyword
    - Type
    - PortabilityDirectiveList
    - Semicolon
  TypeForwardDeclarationNode:
    - Name
    - EqualSign
    - Type
    - Semicolon
  TypeHelperNode:
    - {Name: TypeKeyword, Type: Token}
    - {Name: Helper, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: BaseHelperType, Type: AstNode}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: For, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: Contents, Type: ListNode<VisibilitySectionNode>}
    - {Name: End, Type: Token}
  TypeSectionNode:
    - Type
    - TypeList
  UnaryOperationNode:
    - Operator
    - Operand
  UnitNode:
    - Unit
    - UnitName
    - PortabilityDirectives
    - Semicolon
    - InterfaceSection
    - ImplementationSection
    - InitSection
    - Dot
  UnitSectionNode:
    - HeaderKeyword
    - UsesClause
    - Contents
  UsedUnitNode:
    - Name
    - In
    - FileName
  UsesClauseNode:
    - Uses
    - UnitList
    - Semicolon
  VarDeclNode:
    - {Name: Names, Type: ListNode<DelimitedItemNode<Token>>}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: FirstPortabilityDirectives, Type: ListNode<Token>}
    - {Name: Absolute, Type: Token}
    - {Name: AbsoluteAddress, Type: AstNode}
    - {Name: EqualSign, Type: Token}
    - {Name: Value, Type: AstNode}
    - {Name: SecondPortabilityDirectives, Type: ListNode<Token>}
    - {Name: Semicolon, Type: Token}
  VariantGroupNode:
    - {Name: ValueList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Colon, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: FieldDeclList, Type: ListNode<FieldDeclNode>}
    - {Name: VariantSection, Type: VariantSectionNode}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: Semicolon, Type: Token}
  VariantSectionNode:
    - {Name: Case, Type: Token}
    - {Name: Name, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: Of, Type: Token}
    - {Name: VariantGroupList, Type: ListNode<VariantGroupNode>}
  VarSectionNode:
    - Var
    - VarList
  VisibilityNode:
    - Strict
    - Visibility
  VisibilitySectionNode:
    - Visibility
    - Contents
  WhileStatementNode:
    - {Name: While, Type: Token}
    - {Name: Condition, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
  WithStatementNode:
    - {Name: With, Type: Token}
    - {Name: ExpressionList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}