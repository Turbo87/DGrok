NodeTypes:
  ArrayTypeNode:
    - {Name: Array, Type: Token}
    - {Name: OpenBracket, Type: Token}
    - {Name: IndexList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: CloseBracket, Type: Token}
    - {Name: Of, Type: Token}
    - {Name: Type, Type: AstNode}
  AssemblerStatementNode:
    - {Name: Asm, Type: Token}
    - {Name: End, Type: Token}
  BinaryOperationNode:
    - {Name: Left, Type: AstNode}
    - {Name: Operator, Type: Token}
    - {Name: Right, Type: AstNode}
  BlockNode:
    - {Name: Begin, Type: Token}
    - {Name: StatementList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  CaseSelectorNode:
    - {Name: Values, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Colon, Type: Token}
    - {Name: Statement, Type: AstNode}
    - {Name: Semicolon, Type: Token}
  CaseStatementNode:
    - {Name: Case, Type: Token}
    - {Name: Expression, Type: AstNode}
    - {Name: Of, Type: Token}
    - {Name: SelectorList, Type: ListNode<CaseSelectorNode>}
    - {Name: Else, Type: Token}
    - {Name: ElseStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  ClassOfNode:
    - {Name: Class, Type: Token}
    - {Name: Of, Type: Token}
    - {Name: Type, Type: AstNode}
  ClassTypeNode:
    - {Name: Class, Type: Token}
    - {Name: Disposition, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: InheritanceList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: Contents, Type: ListNode<VisibilitySectionNode>}
    - {Name: End, Type: Token}
  ConstantDeclNode:
    - {Name: Name, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: EqualSign, Type: Token}
    - {Name: Value, Type: AstNode}
    - {Name: PortabilityDirectiveList, Type: ListNode<Token>}
    - {Name: Semicolon, Type: Token}
  ConstantListNode:
    - {Name: OpenParenthesis, Type: Token}
    - {Name: ItemList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: CloseParenthesis, Type: Token}
  ConstSectionNode:
    - {Name: Const, Type: Token}
    - {Name: ConstList, Type: ListNode<ConstantDeclNode>}
  ContainsClauseNode:
    - {Name: Contains, Type: Token}
    - {Name: UnitList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Semicolon, Type: Token}
  DirectiveNode:
    - {Name: Semicolon, Type: Token}
    - {Name: Directive, Type: Token}
    - {Name: Value, Type: AstNode}
    - {Name: Data, Type: AstNode}
  EnumeratedTypeNode:
    - {Name: OpenParenthesis, Type: Token}
    - {Name: ItemList, Type: ListNode<DelimitedItemNode<EnumeratedTypeElementNode>>}
    - {Name: CloseParenthesis, Type: Token}
  EnumeratedTypeElementNode:
    - {Name: Name, Type: Token}
    - {Name: EqualSign, Type: Token}
    - {Name: Value, Type: AstNode}
  ExceptionItemNode:
    - {Name: 'On', Type: Token}
    - {Name: Name, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
    - {Name: Semicolon, Type: Token}
  ExportsItemNode:
    - {Name: Name, Type: AstNode}
    - {Name: SpecifierList, Type: ListNode<ExportsSpecifierNode>}
  ExportsSpecifierNode:
    - {Name: Keyword, Type: Token}
    - {Name: Value, Type: AstNode}
  ExportsStatementNode:
    - {Name: Exports, Type: Token}
    - {Name: ItemList, Type: ListNode<DelimitedItemNode<ExportsItemNode>>}
    - {Name: Semicolon, Type: Token}
  FancyBlockNode:
    - {Name: DeclList, Type: ListNode<AstNode>}
    - {Name: Block, Type: AstNode}
  FieldDeclNode:
    - {Name: NameList, Type: ListNode<DelimitedItemNode<Token>>}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: PortabilityDirectiveList, Type: ListNode<Token>}
    - {Name: Semicolon, Type: Token}
  FieldSectionNode:
    - {Name: Class, Type: Token}
    - {Name: Var, Type: Token}
    - {Name: FieldList, Type: ListNode<FieldDeclNode>}
  FileTypeNode:
    - {Name: File, Type: Token}
    - {Name: Of, Type: Token}
    - {Name: Type, Type: AstNode}
  ForInStatementNode:
    - {Name: For, Type: Token}
    - {Name: LoopVariable, Type: Token}
    - {Name: In, Type: Token}
    - {Name: Expression, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
  ForStatementNode:
    - {Name: For, Type: Token}
    - {Name: LoopVariable, Type: Token}
    - {Name: ColonEquals, Type: Token}
    - {Name: StartingValue, Type: AstNode}
    - {Name: Direction, Type: Token}
    - {Name: EndingValue, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
  GotoStatementNode:
    - {Name: Goto, Type: Token}
    - {Name: LabelId, Type: Token}
  IfStatementNode:
    - {Name: If, Type: Token}
    - {Name: Condition, Type: AstNode}
    - {Name: Then, Type: Token}
    - {Name: ThenStatement, Type: AstNode}
    - {Name: Else, Type: Token}
    - {Name: ElseStatement, Type: AstNode}
  InitSectionNode:
    - {Name: InitializationHeader, Type: Token}
    - {Name: InitializationStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: FinalizationHeader, Type: Token}
    - {Name: FinalizationStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  InterfaceTypeNode:
    - {Name: Interface, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: BaseInterface, Type: AstNode}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: OpenBracket, Type: Token}
    - {Name: Guid, Type: AstNode}
    - {Name: CloseBracket, Type: Token}
    - {Name: MethodAndPropertyList, Type: ListNode<AstNode>}
    - {Name: End, Type: Token}
  LabelDeclSectionNode:
    - {Name: Label, Type: Token}
    - {Name: LabelList, Type: ListNode<DelimitedItemNode<Token>>}
    - {Name: Semicolon, Type: Token}
  LabeledStatementNode:
    - {Name: Label, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Statement, Type: AstNode}
  MethodHeadingNode:
    - {Name: Class, Type: Token}
    - {Name: MethodType, Type: Token}
    - {Name: Name, Type: AstNode}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: ParameterList, Type: ListNode<DelimitedItemNode<ParameterNode>>}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: ReturnType, Type: AstNode}
    - {Name: DirectiveList, Type: ListNode<DirectiveNode>}
    - {Name: Semicolon, Type: Token}
  MethodImplementationNode:
    - {Name: MethodHeading, Type: MethodHeadingNode}
    - {Name: FancyBlock, Type: FancyBlockNode}
    - {Name: Semicolon, Type: Token}
  MethodResolutionNode:
    - {Name: MethodType, Type: Token}
    - {Name: InterfaceMethod, Type: AstNode}
    - {Name: EqualSign, Type: Token}
    - {Name: ImplementationMethod, Type: Token}
    - {Name: Semicolon, Type: Token}
  NumberFormatNode:
    - {Name: Value, Type: AstNode}
    - {Name: SizeColon, Type: Token}
    - {Name: Size, Type: AstNode}
    - {Name: PrecisionColon, Type: Token}
    - {Name: Precision, Type: AstNode}
  OpenArrayNode:
    - {Name: Array, Type: Token}
    - {Name: Of, Type: Token}
    - {Name: Type, Type: AstNode}
  PackageNode:
    - {Name: Package, Type: Token}
    - {Name: Name, Type: Token}
    - {Name: Semicolon, Type: Token}
    - {Name: RequiresClause, Type: RequiresClauseNode}
    - {Name: ContainsClause, Type: ContainsClauseNode}
    - {Name: End, Type: Token}
    - {Name: Dot, Type: Token}
  PackedTypeNode:
    - {Name: Packed, Type: Token}
    - {Name: Type, Type: AstNode}
  ParameterizedNode:
    - {Name: Left, Type: AstNode}
    - {Name: OpenDelimiter, Type: Token}
    - {Name: ParameterList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: CloseDelimiter, Type: Token}
  ParameterNode:
    - {Name: Modifier, Type: Token}
    - {Name: Names, Type: ListNode<DelimitedItemNode<Token>>}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: EqualSign, Type: Token}
    - {Name: DefaultValue, Type: AstNode}
  ParenthesizedExpressionNode:
    - {Name: OpenParenthesis, Type: Token}
    - {Name: Expression, Type: AstNode}
    - {Name: CloseParenthesis, Type: Token}
  PointerDereferenceNode:
    - {Name: Operand, Type: AstNode}
    - {Name: Caret, Type: Token}
  PointerTypeNode:
    - {Name: Caret, Type: Token}
    - {Name: Type, Type: AstNode}
  ProcedureTypeNode:
    - {Name: MethodType, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: ParameterList, Type: ListNode<DelimitedItemNode<ParameterNode>>}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: ReturnType, Type: AstNode}
    - {Name: FirstDirectives, Type: ListNode<DirectiveNode>}
    - {Name: Of, Type: Token}
    - {Name: Object, Type: Token}
    - {Name: SecondDirectives, Type: ListNode<DirectiveNode>}
  ProgramNode:
    - {Name: Program, Type: Token}
    - {Name: Name, Type: Token}
    - {Name: NoiseOpenParenthesis, Type: Token}
    - {Name: NoiseContents, Type: ListNode<DelimitedItemNode<Token>>}
    - {Name: NoiseCloseParenthesis, Type: Token}
    - {Name: Semicolon, Type: Token}
    - {Name: UsesClause, Type: UsesClauseNode}
    - {Name: DeclarationList, Type: ListNode<AstNode>}
    - {Name: InitSection, Type: InitSectionNode}
    - {Name: Dot, Type: Token}
  PropertyNode:
    - {Name: Class, Type: Token}
    - {Name: Property, Type: Token}
    - {Name: Name, Type: Token}
    - {Name: OpenBracket, Type: Token}
    - {Name: ParameterList, Type: ListNode<DelimitedItemNode<ParameterNode>>}
    - {Name: CloseBracket, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: DirectiveList, Type: ListNode<DirectiveNode>}
    - {Name: Semicolon, Type: Token}
  RaiseStatementNode:
    - {Name: Raise, Type: Token}
    - {Name: Exception, Type: AstNode}
    - {Name: At, Type: Token}
    - {Name: Address, Type: AstNode}
  RecordFieldConstantNode:
    - {Name: Name, Type: AstNode}
    - {Name: Colon, Type: Token}
    - {Name: Value, Type: AstNode}
  RecordTypeNode:
    - {Name: Record, Type: Token}
    - {Name: Contents, Type: ListNode<VisibilitySectionNode>}
    - {Name: VariantSection, Type: VariantSectionNode}
    - {Name: End, Type: Token}
  RepeatStatementNode:
    - {Name: Repeat, Type: Token}
    - {Name: StatementList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Until, Type: Token}
    - {Name: Condition, Type: AstNode}
  RequiresClauseNode:
    - {Name: Requires, Type: Token}
    - {Name: PackageList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Semicolon, Type: Token}
  SetLiteralNode:
    - {Name: OpenBracket, Type: Token}
    - {Name: ItemList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: CloseBracket, Type: Token}
  SetOfNode:
    - {Name: Set, Type: Token}
    - {Name: Of, Type: Token}
    - {Name: Type, Type: AstNode}
  StringOfLengthNode:
    - {Name: String, Type: Token}
    - {Name: OpenBracket, Type: Token}
    - {Name: Length, Type: AstNode}
    - {Name: CloseBracket, Type: Token}
  TryExceptNode:
    - {Name: Try, Type: Token}
    - {Name: TryStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Except, Type: Token}
    - {Name: ExceptionItemList, Type: ListNode<ExceptionItemNode>}
    - {Name: Else, Type: Token}
    - {Name: ElseStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  TryFinallyNode:
    - {Name: Try, Type: Token}
    - {Name: TryStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Finally, Type: Token}
    - {Name: FinallyStatements, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: End, Type: Token}
  TypeDeclNode:
    - {Name: Name, Type: Token}
    - {Name: EqualSign, Type: Token}
    - {Name: TypeKeyword, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: PortabilityDirectiveList, Type: ListNode<Token>}
    - {Name: Semicolon, Type: Token}
  TypeForwardDeclarationNode:
    - {Name: Name, Type: Token}
    - {Name: EqualSign, Type: Token}
    - {Name: Type, Type: Token}
    - {Name: Semicolon, Type: Token}
  TypeHelperNode:
    - {Name: TypeKeyword, Type: Token}
    - {Name: Helper, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: BaseHelperType, Type: AstNode}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: For, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: Contents, Type: ListNode<VisibilitySectionNode>}
    - {Name: End, Type: Token}
  TypeSectionNode:
    - {Name: Type, Type: Token}
    - {Name: TypeList, Type: ListNode<AstNode>}
  UnaryOperationNode:
    - {Name: Operator, Type: Token}
    - {Name: Operand, Type: AstNode}
  UnitNode:
    - {Name: Unit, Type: Token}
    - {Name: UnitName, Type: Token}
    - {Name: PortabilityDirectives, Type: ListNode<Token>}
    - {Name: Semicolon, Type: Token}
    - {Name: InterfaceSection, Type: UnitSectionNode}
    - {Name: ImplementationSection, Type: UnitSectionNode}
    - {Name: InitSection, Type: InitSectionNode}
    - {Name: Dot, Type: Token}
  UnitSectionNode:
    - {Name: HeaderKeyword, Type: Token}
    - {Name: UsesClause, Type: UsesClauseNode}
    - {Name: Contents, Type: ListNode<AstNode>}
  UsedUnitNode:
    - {Name: Name, Type: AstNode}
    - {Name: In, Type: Token}
    - {Name: FileName, Type: Token}
  UsesClauseNode:
    - {Name: Uses, Type: Token}
    - {Name: UnitList, Type: ListNode<DelimitedItemNode<UsedUnitNode>>}
    - {Name: Semicolon, Type: Token}
  VarDeclNode:
    - {Name: Names, Type: ListNode<DelimitedItemNode<Token>>}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: FirstPortabilityDirectives, Type: ListNode<Token>}
    - {Name: Absolute, Type: Token}
    - {Name: AbsoluteAddress, Type: AstNode}
    - {Name: EqualSign, Type: Token}
    - {Name: Value, Type: AstNode}
    - {Name: SecondPortabilityDirectives, Type: ListNode<Token>}
    - {Name: Semicolon, Type: Token}
  VariantGroupNode:
    - {Name: ValueList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Colon, Type: Token}
    - {Name: OpenParenthesis, Type: Token}
    - {Name: FieldDeclList, Type: ListNode<FieldDeclNode>}
    - {Name: VariantSection, Type: VariantSectionNode}
    - {Name: CloseParenthesis, Type: Token}
    - {Name: Semicolon, Type: Token}
  VariantSectionNode:
    - {Name: Case, Type: Token}
    - {Name: Name, Type: Token}
    - {Name: Colon, Type: Token}
    - {Name: Type, Type: AstNode}
    - {Name: Of, Type: Token}
    - {Name: VariantGroupList, Type: ListNode<VariantGroupNode>}
  VarSectionNode:
    - {Name: Var, Type: Token}
    - {Name: VarList, Type: ListNode<VarDeclNode>}
  VisibilityNode:
    - {Name: Strict, Type: Token}
    - {Name: Visibility, Type: Token}
  VisibilitySectionNode:
    - {Name: Visibility, Type: VisibilityNode}
    - {Name: Contents, Type: ListNode<AstNode>}
  WhileStatementNode:
    - {Name: While, Type: Token}
    - {Name: Condition, Type: AstNode}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}
  WithStatementNode:
    - {Name: With, Type: Token}
    - {Name: ExpressionList, Type: ListNode<DelimitedItemNode<AstNode>>}
    - {Name: Do, Type: Token}
    - {Name: Statement, Type: AstNode}